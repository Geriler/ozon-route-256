// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package repository

import (
	"context"
)

const getBySKU = `-- name: GetBySKU :one
WITH sold_order_items AS (
  SELECT item_id, count
  FROM order_items oi
  WHERE oi.item_id = $1 AND oi.status = 'sold'
), reserved_order_items AS (
  SELECT item_id, count
  FROM order_items oi
  WHERE oi.item_id = $1 AND oi.status = 'reserved'
)
SELECT si.sku, (si.total_count - COALESCE(soi.count, 0)) AS total_count, SUM(COALESCE(roi.count, 0)) AS reserved_count
FROM stocks_items si
LEFT JOIN sold_order_items soi ON soi.item_id = si.sku
LEFT JOIN reserved_order_items roi ON roi.item_id = si.sku
WHERE si.sku = $1
GROUP BY si.sku, si.total_count, soi.count
`

type GetBySKURow struct {
	Sku           int32
	TotalCount    int32
	ReservedCount int64
}

func (q *Queries) GetBySKU(ctx context.Context, sku int32) (GetBySKURow, error) {
	row := q.db.QueryRow(ctx, getBySKU, sku)
	var i GetBySKURow
	err := row.Scan(&i.Sku, &i.TotalCount, &i.ReservedCount)
	return i, err
}

const reserve = `-- name: Reserve :exec
UPDATE order_items
SET status = 'reserved'
WHERE order_id = $1 AND item_id = $2
`

type ReserveParams struct {
	OrderID int32
	ItemID  int32
}

func (q *Queries) Reserve(ctx context.Context, arg ReserveParams) error {
	_, err := q.db.Exec(ctx, reserve, arg.OrderID, arg.ItemID)
	return err
}

const reserveCancel = `-- name: ReserveCancel :exec
UPDATE order_items
SET status = 'canceled'
WHERE order_id = $1 AND item_id = $2
`

type ReserveCancelParams struct {
	OrderID int32
	ItemID  int32
}

func (q *Queries) ReserveCancel(ctx context.Context, arg ReserveCancelParams) error {
	_, err := q.db.Exec(ctx, reserveCancel, arg.OrderID, arg.ItemID)
	return err
}

const reserveRemove = `-- name: ReserveRemove :exec
UPDATE order_items
SET status = 'sold'
WHERE order_id = $1 AND item_id = $2
`

type ReserveRemoveParams struct {
	OrderID int32
	ItemID  int32
}

func (q *Queries) ReserveRemove(ctx context.Context, arg ReserveRemoveParams) error {
	_, err := q.db.Exec(ctx, reserveRemove, arg.OrderID, arg.ItemID)
	return err
}
