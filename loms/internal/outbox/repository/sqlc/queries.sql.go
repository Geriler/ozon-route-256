// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package repository

import (
	"context"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO outbox (order_id, event_type)
VALUES ($1, $2)
`

type CreateEventParams struct {
	OrderID   int32
	EventType string
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent, arg.OrderID, arg.EventType)
	return err
}

const fetchNextMsg = `-- name: FetchNextMsg :one
SELECT order_id, event_type
FROM outbox
WHERE status = 'pending'
ORDER BY created_at
LIMIT 1
`

type FetchNextMsgRow struct {
	OrderID   int32
	EventType string
}

func (q *Queries) FetchNextMsg(ctx context.Context) (FetchNextMsgRow, error) {
	row := q.db.QueryRow(ctx, fetchNextMsg)
	var i FetchNextMsgRow
	err := row.Scan(&i.OrderID, &i.EventType)
	return i, err
}

const markAsError = `-- name: MarkAsError :exec
UPDATE outbox
SET status = 'error',
    updated_at = NOW()
WHERE order_id = $1
  AND event_type = $2
`

type MarkAsErrorParams struct {
	OrderID   int32
	EventType string
}

func (q *Queries) MarkAsError(ctx context.Context, arg MarkAsErrorParams) error {
	_, err := q.db.Exec(ctx, markAsError, arg.OrderID, arg.EventType)
	return err
}

const markAsSent = `-- name: MarkAsSent :exec
UPDATE outbox
SET status = 'success',
    updated_at = NOW()
WHERE order_id = $1
  AND event_type = $2
`

type MarkAsSentParams struct {
	OrderID   int32
	EventType string
}

func (q *Queries) MarkAsSent(ctx context.Context, arg MarkAsSentParams) error {
	_, err := q.db.Exec(ctx, markAsSent, arg.OrderID, arg.EventType)
	return err
}
