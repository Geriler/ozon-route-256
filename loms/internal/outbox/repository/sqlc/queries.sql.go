// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package repository

import (
	"context"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO outbox (order_id, event_type)
VALUES ($1, $2)
`

type CreateEventParams struct {
	OrderID   int32
	EventType string
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent, arg.OrderID, arg.EventType)
	return err
}

const fetchNextMsgs = `-- name: FetchNextMsgs :many
SELECT order_id, event_type
FROM outbox
WHERE status = 'pending'
ORDER BY created_at
`

type FetchNextMsgsRow struct {
	OrderID   int32
	EventType string
}

func (q *Queries) FetchNextMsgs(ctx context.Context) ([]FetchNextMsgsRow, error) {
	rows, err := q.db.Query(ctx, fetchNextMsgs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchNextMsgsRow
	for rows.Next() {
		var i FetchNextMsgsRow
		if err := rows.Scan(&i.OrderID, &i.EventType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAsError = `-- name: MarkAsError :exec
UPDATE outbox
SET status = 'error',
    updated_at = NOW()
WHERE order_id = $1
  AND event_type = $2
`

type MarkAsErrorParams struct {
	OrderID   int32
	EventType string
}

func (q *Queries) MarkAsError(ctx context.Context, arg MarkAsErrorParams) error {
	_, err := q.db.Exec(ctx, markAsError, arg.OrderID, arg.EventType)
	return err
}

const markAsSuccess = `-- name: MarkAsSuccess :exec
UPDATE outbox
SET status = 'success',
    updated_at = NOW()
WHERE order_id = $1
  AND event_type = $2
`

type MarkAsSuccessParams struct {
	OrderID   int32
	EventType string
}

func (q *Queries) MarkAsSuccess(ctx context.Context, arg MarkAsSuccessParams) error {
	_, err := q.db.Exec(ctx, markAsSuccess, arg.OrderID, arg.EventType)
	return err
}
