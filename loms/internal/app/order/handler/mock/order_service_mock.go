// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package mock

//go:generate minimock -i route256/loms/internal/app/order/handler.OrderService -o order_service_mock.go -n OrderServiceMock -p mock

import (
	"sync"

	"context"
	"route256/loms/internal/order/model"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderServiceMock implements handler.OrderService
type OrderServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcOrderServiceCreate          func(ctx context.Context, order *model.Order) (o1 model.OrderID, err error)
	inspectFuncOrderServiceCreate   func(ctx context.Context, order *model.Order)
	afterOrderServiceCreateCounter  uint64
	beforeOrderServiceCreateCounter uint64
	OrderServiceCreateMock          mOrderServiceMockOrderServiceCreate

	funcOrderServiceGetOrder          func(ctx context.Context, orderID model.OrderID) (op1 *model.Order, err error)
	inspectFuncOrderServiceGetOrder   func(ctx context.Context, orderID model.OrderID)
	afterOrderServiceGetOrderCounter  uint64
	beforeOrderServiceGetOrderCounter uint64
	OrderServiceGetOrderMock          mOrderServiceMockOrderServiceGetOrder

	funcOrderServiceSetStatus          func(ctx context.Context, orderID model.OrderID, status model.Status) (err error)
	inspectFuncOrderServiceSetStatus   func(ctx context.Context, orderID model.OrderID, status model.Status)
	afterOrderServiceSetStatusCounter  uint64
	beforeOrderServiceSetStatusCounter uint64
	OrderServiceSetStatusMock          mOrderServiceMockOrderServiceSetStatus
}

// NewOrderServiceMock returns a mock for handler.OrderService
func NewOrderServiceMock(t minimock.Tester) *OrderServiceMock {
	m := &OrderServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.OrderServiceCreateMock = mOrderServiceMockOrderServiceCreate{mock: m}
	m.OrderServiceCreateMock.callArgs = []*OrderServiceMockOrderServiceCreateParams{}

	m.OrderServiceGetOrderMock = mOrderServiceMockOrderServiceGetOrder{mock: m}
	m.OrderServiceGetOrderMock.callArgs = []*OrderServiceMockOrderServiceGetOrderParams{}

	m.OrderServiceSetStatusMock = mOrderServiceMockOrderServiceSetStatus{mock: m}
	m.OrderServiceSetStatusMock.callArgs = []*OrderServiceMockOrderServiceSetStatusParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrderServiceMockOrderServiceCreate struct {
	optional           bool
	mock               *OrderServiceMock
	defaultExpectation *OrderServiceMockOrderServiceCreateExpectation
	expectations       []*OrderServiceMockOrderServiceCreateExpectation

	callArgs []*OrderServiceMockOrderServiceCreateParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// OrderServiceMockOrderServiceCreateExpectation specifies expectation struct of the OrderService.OrderServiceCreate
type OrderServiceMockOrderServiceCreateExpectation struct {
	mock      *OrderServiceMock
	params    *OrderServiceMockOrderServiceCreateParams
	paramPtrs *OrderServiceMockOrderServiceCreateParamPtrs
	results   *OrderServiceMockOrderServiceCreateResults
	Counter   uint64
}

// OrderServiceMockOrderServiceCreateParams contains parameters of the OrderService.OrderServiceCreate
type OrderServiceMockOrderServiceCreateParams struct {
	ctx   context.Context
	order *model.Order
}

// OrderServiceMockOrderServiceCreateParamPtrs contains pointers to parameters of the OrderService.OrderServiceCreate
type OrderServiceMockOrderServiceCreateParamPtrs struct {
	ctx   *context.Context
	order **model.Order
}

// OrderServiceMockOrderServiceCreateResults contains results of the OrderService.OrderServiceCreate
type OrderServiceMockOrderServiceCreateResults struct {
	o1  model.OrderID
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderServiceCreate *mOrderServiceMockOrderServiceCreate) Optional() *mOrderServiceMockOrderServiceCreate {
	mmOrderServiceCreate.optional = true
	return mmOrderServiceCreate
}

// Expect sets up expected params for OrderService.OrderServiceCreate
func (mmOrderServiceCreate *mOrderServiceMockOrderServiceCreate) Expect(ctx context.Context, order *model.Order) *mOrderServiceMockOrderServiceCreate {
	if mmOrderServiceCreate.mock.funcOrderServiceCreate != nil {
		mmOrderServiceCreate.mock.t.Fatalf("OrderServiceMock.OrderServiceCreate mock is already set by Set")
	}

	if mmOrderServiceCreate.defaultExpectation == nil {
		mmOrderServiceCreate.defaultExpectation = &OrderServiceMockOrderServiceCreateExpectation{}
	}

	if mmOrderServiceCreate.defaultExpectation.paramPtrs != nil {
		mmOrderServiceCreate.mock.t.Fatalf("OrderServiceMock.OrderServiceCreate mock is already set by ExpectParams functions")
	}

	mmOrderServiceCreate.defaultExpectation.params = &OrderServiceMockOrderServiceCreateParams{ctx, order}
	for _, e := range mmOrderServiceCreate.expectations {
		if minimock.Equal(e.params, mmOrderServiceCreate.defaultExpectation.params) {
			mmOrderServiceCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderServiceCreate.defaultExpectation.params)
		}
	}

	return mmOrderServiceCreate
}

// ExpectCtxParam1 sets up expected param ctx for OrderService.OrderServiceCreate
func (mmOrderServiceCreate *mOrderServiceMockOrderServiceCreate) ExpectCtxParam1(ctx context.Context) *mOrderServiceMockOrderServiceCreate {
	if mmOrderServiceCreate.mock.funcOrderServiceCreate != nil {
		mmOrderServiceCreate.mock.t.Fatalf("OrderServiceMock.OrderServiceCreate mock is already set by Set")
	}

	if mmOrderServiceCreate.defaultExpectation == nil {
		mmOrderServiceCreate.defaultExpectation = &OrderServiceMockOrderServiceCreateExpectation{}
	}

	if mmOrderServiceCreate.defaultExpectation.params != nil {
		mmOrderServiceCreate.mock.t.Fatalf("OrderServiceMock.OrderServiceCreate mock is already set by Expect")
	}

	if mmOrderServiceCreate.defaultExpectation.paramPtrs == nil {
		mmOrderServiceCreate.defaultExpectation.paramPtrs = &OrderServiceMockOrderServiceCreateParamPtrs{}
	}
	mmOrderServiceCreate.defaultExpectation.paramPtrs.ctx = &ctx

	return mmOrderServiceCreate
}

// ExpectOrderParam2 sets up expected param order for OrderService.OrderServiceCreate
func (mmOrderServiceCreate *mOrderServiceMockOrderServiceCreate) ExpectOrderParam2(order *model.Order) *mOrderServiceMockOrderServiceCreate {
	if mmOrderServiceCreate.mock.funcOrderServiceCreate != nil {
		mmOrderServiceCreate.mock.t.Fatalf("OrderServiceMock.OrderServiceCreate mock is already set by Set")
	}

	if mmOrderServiceCreate.defaultExpectation == nil {
		mmOrderServiceCreate.defaultExpectation = &OrderServiceMockOrderServiceCreateExpectation{}
	}

	if mmOrderServiceCreate.defaultExpectation.params != nil {
		mmOrderServiceCreate.mock.t.Fatalf("OrderServiceMock.OrderServiceCreate mock is already set by Expect")
	}

	if mmOrderServiceCreate.defaultExpectation.paramPtrs == nil {
		mmOrderServiceCreate.defaultExpectation.paramPtrs = &OrderServiceMockOrderServiceCreateParamPtrs{}
	}
	mmOrderServiceCreate.defaultExpectation.paramPtrs.order = &order

	return mmOrderServiceCreate
}

// Inspect accepts an inspector function that has same arguments as the OrderService.OrderServiceCreate
func (mmOrderServiceCreate *mOrderServiceMockOrderServiceCreate) Inspect(f func(ctx context.Context, order *model.Order)) *mOrderServiceMockOrderServiceCreate {
	if mmOrderServiceCreate.mock.inspectFuncOrderServiceCreate != nil {
		mmOrderServiceCreate.mock.t.Fatalf("Inspect function is already set for OrderServiceMock.OrderServiceCreate")
	}

	mmOrderServiceCreate.mock.inspectFuncOrderServiceCreate = f

	return mmOrderServiceCreate
}

// Return sets up results that will be returned by OrderService.OrderServiceCreate
func (mmOrderServiceCreate *mOrderServiceMockOrderServiceCreate) Return(o1 model.OrderID, err error) *OrderServiceMock {
	if mmOrderServiceCreate.mock.funcOrderServiceCreate != nil {
		mmOrderServiceCreate.mock.t.Fatalf("OrderServiceMock.OrderServiceCreate mock is already set by Set")
	}

	if mmOrderServiceCreate.defaultExpectation == nil {
		mmOrderServiceCreate.defaultExpectation = &OrderServiceMockOrderServiceCreateExpectation{mock: mmOrderServiceCreate.mock}
	}
	mmOrderServiceCreate.defaultExpectation.results = &OrderServiceMockOrderServiceCreateResults{o1, err}
	return mmOrderServiceCreate.mock
}

// Set uses given function f to mock the OrderService.OrderServiceCreate method
func (mmOrderServiceCreate *mOrderServiceMockOrderServiceCreate) Set(f func(ctx context.Context, order *model.Order) (o1 model.OrderID, err error)) *OrderServiceMock {
	if mmOrderServiceCreate.defaultExpectation != nil {
		mmOrderServiceCreate.mock.t.Fatalf("Default expectation is already set for the OrderService.OrderServiceCreate method")
	}

	if len(mmOrderServiceCreate.expectations) > 0 {
		mmOrderServiceCreate.mock.t.Fatalf("Some expectations are already set for the OrderService.OrderServiceCreate method")
	}

	mmOrderServiceCreate.mock.funcOrderServiceCreate = f
	return mmOrderServiceCreate.mock
}

// When sets expectation for the OrderService.OrderServiceCreate which will trigger the result defined by the following
// Then helper
func (mmOrderServiceCreate *mOrderServiceMockOrderServiceCreate) When(ctx context.Context, order *model.Order) *OrderServiceMockOrderServiceCreateExpectation {
	if mmOrderServiceCreate.mock.funcOrderServiceCreate != nil {
		mmOrderServiceCreate.mock.t.Fatalf("OrderServiceMock.OrderServiceCreate mock is already set by Set")
	}

	expectation := &OrderServiceMockOrderServiceCreateExpectation{
		mock:   mmOrderServiceCreate.mock,
		params: &OrderServiceMockOrderServiceCreateParams{ctx, order},
	}
	mmOrderServiceCreate.expectations = append(mmOrderServiceCreate.expectations, expectation)
	return expectation
}

// Then sets up OrderService.OrderServiceCreate return parameters for the expectation previously defined by the When method
func (e *OrderServiceMockOrderServiceCreateExpectation) Then(o1 model.OrderID, err error) *OrderServiceMock {
	e.results = &OrderServiceMockOrderServiceCreateResults{o1, err}
	return e.mock
}

// Times sets number of times OrderService.OrderServiceCreate should be invoked
func (mmOrderServiceCreate *mOrderServiceMockOrderServiceCreate) Times(n uint64) *mOrderServiceMockOrderServiceCreate {
	if n == 0 {
		mmOrderServiceCreate.mock.t.Fatalf("Times of OrderServiceMock.OrderServiceCreate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderServiceCreate.expectedInvocations, n)
	return mmOrderServiceCreate
}

func (mmOrderServiceCreate *mOrderServiceMockOrderServiceCreate) invocationsDone() bool {
	if len(mmOrderServiceCreate.expectations) == 0 && mmOrderServiceCreate.defaultExpectation == nil && mmOrderServiceCreate.mock.funcOrderServiceCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderServiceCreate.mock.afterOrderServiceCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderServiceCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderServiceCreate implements handler.OrderService
func (mmOrderServiceCreate *OrderServiceMock) OrderServiceCreate(ctx context.Context, order *model.Order) (o1 model.OrderID, err error) {
	mm_atomic.AddUint64(&mmOrderServiceCreate.beforeOrderServiceCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderServiceCreate.afterOrderServiceCreateCounter, 1)

	if mmOrderServiceCreate.inspectFuncOrderServiceCreate != nil {
		mmOrderServiceCreate.inspectFuncOrderServiceCreate(ctx, order)
	}

	mm_params := OrderServiceMockOrderServiceCreateParams{ctx, order}

	// Record call args
	mmOrderServiceCreate.OrderServiceCreateMock.mutex.Lock()
	mmOrderServiceCreate.OrderServiceCreateMock.callArgs = append(mmOrderServiceCreate.OrderServiceCreateMock.callArgs, &mm_params)
	mmOrderServiceCreate.OrderServiceCreateMock.mutex.Unlock()

	for _, e := range mmOrderServiceCreate.OrderServiceCreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.o1, e.results.err
		}
	}

	if mmOrderServiceCreate.OrderServiceCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderServiceCreate.OrderServiceCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderServiceCreate.OrderServiceCreateMock.defaultExpectation.params
		mm_want_ptrs := mmOrderServiceCreate.OrderServiceCreateMock.defaultExpectation.paramPtrs

		mm_got := OrderServiceMockOrderServiceCreateParams{ctx, order}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderServiceCreate.t.Errorf("OrderServiceMock.OrderServiceCreate got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.order != nil && !minimock.Equal(*mm_want_ptrs.order, mm_got.order) {
				mmOrderServiceCreate.t.Errorf("OrderServiceMock.OrderServiceCreate got unexpected parameter order, want: %#v, got: %#v%s\n", *mm_want_ptrs.order, mm_got.order, minimock.Diff(*mm_want_ptrs.order, mm_got.order))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderServiceCreate.t.Errorf("OrderServiceMock.OrderServiceCreate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderServiceCreate.OrderServiceCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderServiceCreate.t.Fatal("No results are set for the OrderServiceMock.OrderServiceCreate")
		}
		return (*mm_results).o1, (*mm_results).err
	}
	if mmOrderServiceCreate.funcOrderServiceCreate != nil {
		return mmOrderServiceCreate.funcOrderServiceCreate(ctx, order)
	}
	mmOrderServiceCreate.t.Fatalf("Unexpected call to OrderServiceMock.OrderServiceCreate. %v %v", ctx, order)
	return
}

// OrderServiceCreateAfterCounter returns a count of finished OrderServiceMock.OrderServiceCreate invocations
func (mmOrderServiceCreate *OrderServiceMock) OrderServiceCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderServiceCreate.afterOrderServiceCreateCounter)
}

// OrderServiceCreateBeforeCounter returns a count of OrderServiceMock.OrderServiceCreate invocations
func (mmOrderServiceCreate *OrderServiceMock) OrderServiceCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderServiceCreate.beforeOrderServiceCreateCounter)
}

// Calls returns a list of arguments used in each call to OrderServiceMock.OrderServiceCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderServiceCreate *mOrderServiceMockOrderServiceCreate) Calls() []*OrderServiceMockOrderServiceCreateParams {
	mmOrderServiceCreate.mutex.RLock()

	argCopy := make([]*OrderServiceMockOrderServiceCreateParams, len(mmOrderServiceCreate.callArgs))
	copy(argCopy, mmOrderServiceCreate.callArgs)

	mmOrderServiceCreate.mutex.RUnlock()

	return argCopy
}

// MinimockOrderServiceCreateDone returns true if the count of the OrderServiceCreate invocations corresponds
// the number of defined expectations
func (m *OrderServiceMock) MinimockOrderServiceCreateDone() bool {
	if m.OrderServiceCreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderServiceCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderServiceCreateMock.invocationsDone()
}

// MinimockOrderServiceCreateInspect logs each unmet expectation
func (m *OrderServiceMock) MinimockOrderServiceCreateInspect() {
	for _, e := range m.OrderServiceCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderServiceMock.OrderServiceCreate with params: %#v", *e.params)
		}
	}

	afterOrderServiceCreateCounter := mm_atomic.LoadUint64(&m.afterOrderServiceCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderServiceCreateMock.defaultExpectation != nil && afterOrderServiceCreateCounter < 1 {
		if m.OrderServiceCreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderServiceMock.OrderServiceCreate")
		} else {
			m.t.Errorf("Expected call to OrderServiceMock.OrderServiceCreate with params: %#v", *m.OrderServiceCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderServiceCreate != nil && afterOrderServiceCreateCounter < 1 {
		m.t.Error("Expected call to OrderServiceMock.OrderServiceCreate")
	}

	if !m.OrderServiceCreateMock.invocationsDone() && afterOrderServiceCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderServiceMock.OrderServiceCreate but found %d calls",
			mm_atomic.LoadUint64(&m.OrderServiceCreateMock.expectedInvocations), afterOrderServiceCreateCounter)
	}
}

type mOrderServiceMockOrderServiceGetOrder struct {
	optional           bool
	mock               *OrderServiceMock
	defaultExpectation *OrderServiceMockOrderServiceGetOrderExpectation
	expectations       []*OrderServiceMockOrderServiceGetOrderExpectation

	callArgs []*OrderServiceMockOrderServiceGetOrderParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// OrderServiceMockOrderServiceGetOrderExpectation specifies expectation struct of the OrderService.OrderServiceGetOrder
type OrderServiceMockOrderServiceGetOrderExpectation struct {
	mock      *OrderServiceMock
	params    *OrderServiceMockOrderServiceGetOrderParams
	paramPtrs *OrderServiceMockOrderServiceGetOrderParamPtrs
	results   *OrderServiceMockOrderServiceGetOrderResults
	Counter   uint64
}

// OrderServiceMockOrderServiceGetOrderParams contains parameters of the OrderService.OrderServiceGetOrder
type OrderServiceMockOrderServiceGetOrderParams struct {
	ctx     context.Context
	orderID model.OrderID
}

// OrderServiceMockOrderServiceGetOrderParamPtrs contains pointers to parameters of the OrderService.OrderServiceGetOrder
type OrderServiceMockOrderServiceGetOrderParamPtrs struct {
	ctx     *context.Context
	orderID *model.OrderID
}

// OrderServiceMockOrderServiceGetOrderResults contains results of the OrderService.OrderServiceGetOrder
type OrderServiceMockOrderServiceGetOrderResults struct {
	op1 *model.Order
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderServiceGetOrder *mOrderServiceMockOrderServiceGetOrder) Optional() *mOrderServiceMockOrderServiceGetOrder {
	mmOrderServiceGetOrder.optional = true
	return mmOrderServiceGetOrder
}

// Expect sets up expected params for OrderService.OrderServiceGetOrder
func (mmOrderServiceGetOrder *mOrderServiceMockOrderServiceGetOrder) Expect(ctx context.Context, orderID model.OrderID) *mOrderServiceMockOrderServiceGetOrder {
	if mmOrderServiceGetOrder.mock.funcOrderServiceGetOrder != nil {
		mmOrderServiceGetOrder.mock.t.Fatalf("OrderServiceMock.OrderServiceGetOrder mock is already set by Set")
	}

	if mmOrderServiceGetOrder.defaultExpectation == nil {
		mmOrderServiceGetOrder.defaultExpectation = &OrderServiceMockOrderServiceGetOrderExpectation{}
	}

	if mmOrderServiceGetOrder.defaultExpectation.paramPtrs != nil {
		mmOrderServiceGetOrder.mock.t.Fatalf("OrderServiceMock.OrderServiceGetOrder mock is already set by ExpectParams functions")
	}

	mmOrderServiceGetOrder.defaultExpectation.params = &OrderServiceMockOrderServiceGetOrderParams{ctx, orderID}
	for _, e := range mmOrderServiceGetOrder.expectations {
		if minimock.Equal(e.params, mmOrderServiceGetOrder.defaultExpectation.params) {
			mmOrderServiceGetOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderServiceGetOrder.defaultExpectation.params)
		}
	}

	return mmOrderServiceGetOrder
}

// ExpectCtxParam1 sets up expected param ctx for OrderService.OrderServiceGetOrder
func (mmOrderServiceGetOrder *mOrderServiceMockOrderServiceGetOrder) ExpectCtxParam1(ctx context.Context) *mOrderServiceMockOrderServiceGetOrder {
	if mmOrderServiceGetOrder.mock.funcOrderServiceGetOrder != nil {
		mmOrderServiceGetOrder.mock.t.Fatalf("OrderServiceMock.OrderServiceGetOrder mock is already set by Set")
	}

	if mmOrderServiceGetOrder.defaultExpectation == nil {
		mmOrderServiceGetOrder.defaultExpectation = &OrderServiceMockOrderServiceGetOrderExpectation{}
	}

	if mmOrderServiceGetOrder.defaultExpectation.params != nil {
		mmOrderServiceGetOrder.mock.t.Fatalf("OrderServiceMock.OrderServiceGetOrder mock is already set by Expect")
	}

	if mmOrderServiceGetOrder.defaultExpectation.paramPtrs == nil {
		mmOrderServiceGetOrder.defaultExpectation.paramPtrs = &OrderServiceMockOrderServiceGetOrderParamPtrs{}
	}
	mmOrderServiceGetOrder.defaultExpectation.paramPtrs.ctx = &ctx

	return mmOrderServiceGetOrder
}

// ExpectOrderIDParam2 sets up expected param orderID for OrderService.OrderServiceGetOrder
func (mmOrderServiceGetOrder *mOrderServiceMockOrderServiceGetOrder) ExpectOrderIDParam2(orderID model.OrderID) *mOrderServiceMockOrderServiceGetOrder {
	if mmOrderServiceGetOrder.mock.funcOrderServiceGetOrder != nil {
		mmOrderServiceGetOrder.mock.t.Fatalf("OrderServiceMock.OrderServiceGetOrder mock is already set by Set")
	}

	if mmOrderServiceGetOrder.defaultExpectation == nil {
		mmOrderServiceGetOrder.defaultExpectation = &OrderServiceMockOrderServiceGetOrderExpectation{}
	}

	if mmOrderServiceGetOrder.defaultExpectation.params != nil {
		mmOrderServiceGetOrder.mock.t.Fatalf("OrderServiceMock.OrderServiceGetOrder mock is already set by Expect")
	}

	if mmOrderServiceGetOrder.defaultExpectation.paramPtrs == nil {
		mmOrderServiceGetOrder.defaultExpectation.paramPtrs = &OrderServiceMockOrderServiceGetOrderParamPtrs{}
	}
	mmOrderServiceGetOrder.defaultExpectation.paramPtrs.orderID = &orderID

	return mmOrderServiceGetOrder
}

// Inspect accepts an inspector function that has same arguments as the OrderService.OrderServiceGetOrder
func (mmOrderServiceGetOrder *mOrderServiceMockOrderServiceGetOrder) Inspect(f func(ctx context.Context, orderID model.OrderID)) *mOrderServiceMockOrderServiceGetOrder {
	if mmOrderServiceGetOrder.mock.inspectFuncOrderServiceGetOrder != nil {
		mmOrderServiceGetOrder.mock.t.Fatalf("Inspect function is already set for OrderServiceMock.OrderServiceGetOrder")
	}

	mmOrderServiceGetOrder.mock.inspectFuncOrderServiceGetOrder = f

	return mmOrderServiceGetOrder
}

// Return sets up results that will be returned by OrderService.OrderServiceGetOrder
func (mmOrderServiceGetOrder *mOrderServiceMockOrderServiceGetOrder) Return(op1 *model.Order, err error) *OrderServiceMock {
	if mmOrderServiceGetOrder.mock.funcOrderServiceGetOrder != nil {
		mmOrderServiceGetOrder.mock.t.Fatalf("OrderServiceMock.OrderServiceGetOrder mock is already set by Set")
	}

	if mmOrderServiceGetOrder.defaultExpectation == nil {
		mmOrderServiceGetOrder.defaultExpectation = &OrderServiceMockOrderServiceGetOrderExpectation{mock: mmOrderServiceGetOrder.mock}
	}
	mmOrderServiceGetOrder.defaultExpectation.results = &OrderServiceMockOrderServiceGetOrderResults{op1, err}
	return mmOrderServiceGetOrder.mock
}

// Set uses given function f to mock the OrderService.OrderServiceGetOrder method
func (mmOrderServiceGetOrder *mOrderServiceMockOrderServiceGetOrder) Set(f func(ctx context.Context, orderID model.OrderID) (op1 *model.Order, err error)) *OrderServiceMock {
	if mmOrderServiceGetOrder.defaultExpectation != nil {
		mmOrderServiceGetOrder.mock.t.Fatalf("Default expectation is already set for the OrderService.OrderServiceGetOrder method")
	}

	if len(mmOrderServiceGetOrder.expectations) > 0 {
		mmOrderServiceGetOrder.mock.t.Fatalf("Some expectations are already set for the OrderService.OrderServiceGetOrder method")
	}

	mmOrderServiceGetOrder.mock.funcOrderServiceGetOrder = f
	return mmOrderServiceGetOrder.mock
}

// When sets expectation for the OrderService.OrderServiceGetOrder which will trigger the result defined by the following
// Then helper
func (mmOrderServiceGetOrder *mOrderServiceMockOrderServiceGetOrder) When(ctx context.Context, orderID model.OrderID) *OrderServiceMockOrderServiceGetOrderExpectation {
	if mmOrderServiceGetOrder.mock.funcOrderServiceGetOrder != nil {
		mmOrderServiceGetOrder.mock.t.Fatalf("OrderServiceMock.OrderServiceGetOrder mock is already set by Set")
	}

	expectation := &OrderServiceMockOrderServiceGetOrderExpectation{
		mock:   mmOrderServiceGetOrder.mock,
		params: &OrderServiceMockOrderServiceGetOrderParams{ctx, orderID},
	}
	mmOrderServiceGetOrder.expectations = append(mmOrderServiceGetOrder.expectations, expectation)
	return expectation
}

// Then sets up OrderService.OrderServiceGetOrder return parameters for the expectation previously defined by the When method
func (e *OrderServiceMockOrderServiceGetOrderExpectation) Then(op1 *model.Order, err error) *OrderServiceMock {
	e.results = &OrderServiceMockOrderServiceGetOrderResults{op1, err}
	return e.mock
}

// Times sets number of times OrderService.OrderServiceGetOrder should be invoked
func (mmOrderServiceGetOrder *mOrderServiceMockOrderServiceGetOrder) Times(n uint64) *mOrderServiceMockOrderServiceGetOrder {
	if n == 0 {
		mmOrderServiceGetOrder.mock.t.Fatalf("Times of OrderServiceMock.OrderServiceGetOrder mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderServiceGetOrder.expectedInvocations, n)
	return mmOrderServiceGetOrder
}

func (mmOrderServiceGetOrder *mOrderServiceMockOrderServiceGetOrder) invocationsDone() bool {
	if len(mmOrderServiceGetOrder.expectations) == 0 && mmOrderServiceGetOrder.defaultExpectation == nil && mmOrderServiceGetOrder.mock.funcOrderServiceGetOrder == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderServiceGetOrder.mock.afterOrderServiceGetOrderCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderServiceGetOrder.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderServiceGetOrder implements handler.OrderService
func (mmOrderServiceGetOrder *OrderServiceMock) OrderServiceGetOrder(ctx context.Context, orderID model.OrderID) (op1 *model.Order, err error) {
	mm_atomic.AddUint64(&mmOrderServiceGetOrder.beforeOrderServiceGetOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderServiceGetOrder.afterOrderServiceGetOrderCounter, 1)

	if mmOrderServiceGetOrder.inspectFuncOrderServiceGetOrder != nil {
		mmOrderServiceGetOrder.inspectFuncOrderServiceGetOrder(ctx, orderID)
	}

	mm_params := OrderServiceMockOrderServiceGetOrderParams{ctx, orderID}

	// Record call args
	mmOrderServiceGetOrder.OrderServiceGetOrderMock.mutex.Lock()
	mmOrderServiceGetOrder.OrderServiceGetOrderMock.callArgs = append(mmOrderServiceGetOrder.OrderServiceGetOrderMock.callArgs, &mm_params)
	mmOrderServiceGetOrder.OrderServiceGetOrderMock.mutex.Unlock()

	for _, e := range mmOrderServiceGetOrder.OrderServiceGetOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmOrderServiceGetOrder.OrderServiceGetOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderServiceGetOrder.OrderServiceGetOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderServiceGetOrder.OrderServiceGetOrderMock.defaultExpectation.params
		mm_want_ptrs := mmOrderServiceGetOrder.OrderServiceGetOrderMock.defaultExpectation.paramPtrs

		mm_got := OrderServiceMockOrderServiceGetOrderParams{ctx, orderID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderServiceGetOrder.t.Errorf("OrderServiceMock.OrderServiceGetOrder got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.orderID != nil && !minimock.Equal(*mm_want_ptrs.orderID, mm_got.orderID) {
				mmOrderServiceGetOrder.t.Errorf("OrderServiceMock.OrderServiceGetOrder got unexpected parameter orderID, want: %#v, got: %#v%s\n", *mm_want_ptrs.orderID, mm_got.orderID, minimock.Diff(*mm_want_ptrs.orderID, mm_got.orderID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderServiceGetOrder.t.Errorf("OrderServiceMock.OrderServiceGetOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderServiceGetOrder.OrderServiceGetOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderServiceGetOrder.t.Fatal("No results are set for the OrderServiceMock.OrderServiceGetOrder")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmOrderServiceGetOrder.funcOrderServiceGetOrder != nil {
		return mmOrderServiceGetOrder.funcOrderServiceGetOrder(ctx, orderID)
	}
	mmOrderServiceGetOrder.t.Fatalf("Unexpected call to OrderServiceMock.OrderServiceGetOrder. %v %v", ctx, orderID)
	return
}

// OrderServiceGetOrderAfterCounter returns a count of finished OrderServiceMock.OrderServiceGetOrder invocations
func (mmOrderServiceGetOrder *OrderServiceMock) OrderServiceGetOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderServiceGetOrder.afterOrderServiceGetOrderCounter)
}

// OrderServiceGetOrderBeforeCounter returns a count of OrderServiceMock.OrderServiceGetOrder invocations
func (mmOrderServiceGetOrder *OrderServiceMock) OrderServiceGetOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderServiceGetOrder.beforeOrderServiceGetOrderCounter)
}

// Calls returns a list of arguments used in each call to OrderServiceMock.OrderServiceGetOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderServiceGetOrder *mOrderServiceMockOrderServiceGetOrder) Calls() []*OrderServiceMockOrderServiceGetOrderParams {
	mmOrderServiceGetOrder.mutex.RLock()

	argCopy := make([]*OrderServiceMockOrderServiceGetOrderParams, len(mmOrderServiceGetOrder.callArgs))
	copy(argCopy, mmOrderServiceGetOrder.callArgs)

	mmOrderServiceGetOrder.mutex.RUnlock()

	return argCopy
}

// MinimockOrderServiceGetOrderDone returns true if the count of the OrderServiceGetOrder invocations corresponds
// the number of defined expectations
func (m *OrderServiceMock) MinimockOrderServiceGetOrderDone() bool {
	if m.OrderServiceGetOrderMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderServiceGetOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderServiceGetOrderMock.invocationsDone()
}

// MinimockOrderServiceGetOrderInspect logs each unmet expectation
func (m *OrderServiceMock) MinimockOrderServiceGetOrderInspect() {
	for _, e := range m.OrderServiceGetOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderServiceMock.OrderServiceGetOrder with params: %#v", *e.params)
		}
	}

	afterOrderServiceGetOrderCounter := mm_atomic.LoadUint64(&m.afterOrderServiceGetOrderCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderServiceGetOrderMock.defaultExpectation != nil && afterOrderServiceGetOrderCounter < 1 {
		if m.OrderServiceGetOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderServiceMock.OrderServiceGetOrder")
		} else {
			m.t.Errorf("Expected call to OrderServiceMock.OrderServiceGetOrder with params: %#v", *m.OrderServiceGetOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderServiceGetOrder != nil && afterOrderServiceGetOrderCounter < 1 {
		m.t.Error("Expected call to OrderServiceMock.OrderServiceGetOrder")
	}

	if !m.OrderServiceGetOrderMock.invocationsDone() && afterOrderServiceGetOrderCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderServiceMock.OrderServiceGetOrder but found %d calls",
			mm_atomic.LoadUint64(&m.OrderServiceGetOrderMock.expectedInvocations), afterOrderServiceGetOrderCounter)
	}
}

type mOrderServiceMockOrderServiceSetStatus struct {
	optional           bool
	mock               *OrderServiceMock
	defaultExpectation *OrderServiceMockOrderServiceSetStatusExpectation
	expectations       []*OrderServiceMockOrderServiceSetStatusExpectation

	callArgs []*OrderServiceMockOrderServiceSetStatusParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// OrderServiceMockOrderServiceSetStatusExpectation specifies expectation struct of the OrderService.OrderServiceSetStatus
type OrderServiceMockOrderServiceSetStatusExpectation struct {
	mock      *OrderServiceMock
	params    *OrderServiceMockOrderServiceSetStatusParams
	paramPtrs *OrderServiceMockOrderServiceSetStatusParamPtrs
	results   *OrderServiceMockOrderServiceSetStatusResults
	Counter   uint64
}

// OrderServiceMockOrderServiceSetStatusParams contains parameters of the OrderService.OrderServiceSetStatus
type OrderServiceMockOrderServiceSetStatusParams struct {
	ctx     context.Context
	orderID model.OrderID
	status  model.Status
}

// OrderServiceMockOrderServiceSetStatusParamPtrs contains pointers to parameters of the OrderService.OrderServiceSetStatus
type OrderServiceMockOrderServiceSetStatusParamPtrs struct {
	ctx     *context.Context
	orderID *model.OrderID
	status  *model.Status
}

// OrderServiceMockOrderServiceSetStatusResults contains results of the OrderService.OrderServiceSetStatus
type OrderServiceMockOrderServiceSetStatusResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderServiceSetStatus *mOrderServiceMockOrderServiceSetStatus) Optional() *mOrderServiceMockOrderServiceSetStatus {
	mmOrderServiceSetStatus.optional = true
	return mmOrderServiceSetStatus
}

// Expect sets up expected params for OrderService.OrderServiceSetStatus
func (mmOrderServiceSetStatus *mOrderServiceMockOrderServiceSetStatus) Expect(ctx context.Context, orderID model.OrderID, status model.Status) *mOrderServiceMockOrderServiceSetStatus {
	if mmOrderServiceSetStatus.mock.funcOrderServiceSetStatus != nil {
		mmOrderServiceSetStatus.mock.t.Fatalf("OrderServiceMock.OrderServiceSetStatus mock is already set by Set")
	}

	if mmOrderServiceSetStatus.defaultExpectation == nil {
		mmOrderServiceSetStatus.defaultExpectation = &OrderServiceMockOrderServiceSetStatusExpectation{}
	}

	if mmOrderServiceSetStatus.defaultExpectation.paramPtrs != nil {
		mmOrderServiceSetStatus.mock.t.Fatalf("OrderServiceMock.OrderServiceSetStatus mock is already set by ExpectParams functions")
	}

	mmOrderServiceSetStatus.defaultExpectation.params = &OrderServiceMockOrderServiceSetStatusParams{ctx, orderID, status}
	for _, e := range mmOrderServiceSetStatus.expectations {
		if minimock.Equal(e.params, mmOrderServiceSetStatus.defaultExpectation.params) {
			mmOrderServiceSetStatus.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderServiceSetStatus.defaultExpectation.params)
		}
	}

	return mmOrderServiceSetStatus
}

// ExpectCtxParam1 sets up expected param ctx for OrderService.OrderServiceSetStatus
func (mmOrderServiceSetStatus *mOrderServiceMockOrderServiceSetStatus) ExpectCtxParam1(ctx context.Context) *mOrderServiceMockOrderServiceSetStatus {
	if mmOrderServiceSetStatus.mock.funcOrderServiceSetStatus != nil {
		mmOrderServiceSetStatus.mock.t.Fatalf("OrderServiceMock.OrderServiceSetStatus mock is already set by Set")
	}

	if mmOrderServiceSetStatus.defaultExpectation == nil {
		mmOrderServiceSetStatus.defaultExpectation = &OrderServiceMockOrderServiceSetStatusExpectation{}
	}

	if mmOrderServiceSetStatus.defaultExpectation.params != nil {
		mmOrderServiceSetStatus.mock.t.Fatalf("OrderServiceMock.OrderServiceSetStatus mock is already set by Expect")
	}

	if mmOrderServiceSetStatus.defaultExpectation.paramPtrs == nil {
		mmOrderServiceSetStatus.defaultExpectation.paramPtrs = &OrderServiceMockOrderServiceSetStatusParamPtrs{}
	}
	mmOrderServiceSetStatus.defaultExpectation.paramPtrs.ctx = &ctx

	return mmOrderServiceSetStatus
}

// ExpectOrderIDParam2 sets up expected param orderID for OrderService.OrderServiceSetStatus
func (mmOrderServiceSetStatus *mOrderServiceMockOrderServiceSetStatus) ExpectOrderIDParam2(orderID model.OrderID) *mOrderServiceMockOrderServiceSetStatus {
	if mmOrderServiceSetStatus.mock.funcOrderServiceSetStatus != nil {
		mmOrderServiceSetStatus.mock.t.Fatalf("OrderServiceMock.OrderServiceSetStatus mock is already set by Set")
	}

	if mmOrderServiceSetStatus.defaultExpectation == nil {
		mmOrderServiceSetStatus.defaultExpectation = &OrderServiceMockOrderServiceSetStatusExpectation{}
	}

	if mmOrderServiceSetStatus.defaultExpectation.params != nil {
		mmOrderServiceSetStatus.mock.t.Fatalf("OrderServiceMock.OrderServiceSetStatus mock is already set by Expect")
	}

	if mmOrderServiceSetStatus.defaultExpectation.paramPtrs == nil {
		mmOrderServiceSetStatus.defaultExpectation.paramPtrs = &OrderServiceMockOrderServiceSetStatusParamPtrs{}
	}
	mmOrderServiceSetStatus.defaultExpectation.paramPtrs.orderID = &orderID

	return mmOrderServiceSetStatus
}

// ExpectStatusParam3 sets up expected param status for OrderService.OrderServiceSetStatus
func (mmOrderServiceSetStatus *mOrderServiceMockOrderServiceSetStatus) ExpectStatusParam3(status model.Status) *mOrderServiceMockOrderServiceSetStatus {
	if mmOrderServiceSetStatus.mock.funcOrderServiceSetStatus != nil {
		mmOrderServiceSetStatus.mock.t.Fatalf("OrderServiceMock.OrderServiceSetStatus mock is already set by Set")
	}

	if mmOrderServiceSetStatus.defaultExpectation == nil {
		mmOrderServiceSetStatus.defaultExpectation = &OrderServiceMockOrderServiceSetStatusExpectation{}
	}

	if mmOrderServiceSetStatus.defaultExpectation.params != nil {
		mmOrderServiceSetStatus.mock.t.Fatalf("OrderServiceMock.OrderServiceSetStatus mock is already set by Expect")
	}

	if mmOrderServiceSetStatus.defaultExpectation.paramPtrs == nil {
		mmOrderServiceSetStatus.defaultExpectation.paramPtrs = &OrderServiceMockOrderServiceSetStatusParamPtrs{}
	}
	mmOrderServiceSetStatus.defaultExpectation.paramPtrs.status = &status

	return mmOrderServiceSetStatus
}

// Inspect accepts an inspector function that has same arguments as the OrderService.OrderServiceSetStatus
func (mmOrderServiceSetStatus *mOrderServiceMockOrderServiceSetStatus) Inspect(f func(ctx context.Context, orderID model.OrderID, status model.Status)) *mOrderServiceMockOrderServiceSetStatus {
	if mmOrderServiceSetStatus.mock.inspectFuncOrderServiceSetStatus != nil {
		mmOrderServiceSetStatus.mock.t.Fatalf("Inspect function is already set for OrderServiceMock.OrderServiceSetStatus")
	}

	mmOrderServiceSetStatus.mock.inspectFuncOrderServiceSetStatus = f

	return mmOrderServiceSetStatus
}

// Return sets up results that will be returned by OrderService.OrderServiceSetStatus
func (mmOrderServiceSetStatus *mOrderServiceMockOrderServiceSetStatus) Return(err error) *OrderServiceMock {
	if mmOrderServiceSetStatus.mock.funcOrderServiceSetStatus != nil {
		mmOrderServiceSetStatus.mock.t.Fatalf("OrderServiceMock.OrderServiceSetStatus mock is already set by Set")
	}

	if mmOrderServiceSetStatus.defaultExpectation == nil {
		mmOrderServiceSetStatus.defaultExpectation = &OrderServiceMockOrderServiceSetStatusExpectation{mock: mmOrderServiceSetStatus.mock}
	}
	mmOrderServiceSetStatus.defaultExpectation.results = &OrderServiceMockOrderServiceSetStatusResults{err}
	return mmOrderServiceSetStatus.mock
}

// Set uses given function f to mock the OrderService.OrderServiceSetStatus method
func (mmOrderServiceSetStatus *mOrderServiceMockOrderServiceSetStatus) Set(f func(ctx context.Context, orderID model.OrderID, status model.Status) (err error)) *OrderServiceMock {
	if mmOrderServiceSetStatus.defaultExpectation != nil {
		mmOrderServiceSetStatus.mock.t.Fatalf("Default expectation is already set for the OrderService.OrderServiceSetStatus method")
	}

	if len(mmOrderServiceSetStatus.expectations) > 0 {
		mmOrderServiceSetStatus.mock.t.Fatalf("Some expectations are already set for the OrderService.OrderServiceSetStatus method")
	}

	mmOrderServiceSetStatus.mock.funcOrderServiceSetStatus = f
	return mmOrderServiceSetStatus.mock
}

// When sets expectation for the OrderService.OrderServiceSetStatus which will trigger the result defined by the following
// Then helper
func (mmOrderServiceSetStatus *mOrderServiceMockOrderServiceSetStatus) When(ctx context.Context, orderID model.OrderID, status model.Status) *OrderServiceMockOrderServiceSetStatusExpectation {
	if mmOrderServiceSetStatus.mock.funcOrderServiceSetStatus != nil {
		mmOrderServiceSetStatus.mock.t.Fatalf("OrderServiceMock.OrderServiceSetStatus mock is already set by Set")
	}

	expectation := &OrderServiceMockOrderServiceSetStatusExpectation{
		mock:   mmOrderServiceSetStatus.mock,
		params: &OrderServiceMockOrderServiceSetStatusParams{ctx, orderID, status},
	}
	mmOrderServiceSetStatus.expectations = append(mmOrderServiceSetStatus.expectations, expectation)
	return expectation
}

// Then sets up OrderService.OrderServiceSetStatus return parameters for the expectation previously defined by the When method
func (e *OrderServiceMockOrderServiceSetStatusExpectation) Then(err error) *OrderServiceMock {
	e.results = &OrderServiceMockOrderServiceSetStatusResults{err}
	return e.mock
}

// Times sets number of times OrderService.OrderServiceSetStatus should be invoked
func (mmOrderServiceSetStatus *mOrderServiceMockOrderServiceSetStatus) Times(n uint64) *mOrderServiceMockOrderServiceSetStatus {
	if n == 0 {
		mmOrderServiceSetStatus.mock.t.Fatalf("Times of OrderServiceMock.OrderServiceSetStatus mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderServiceSetStatus.expectedInvocations, n)
	return mmOrderServiceSetStatus
}

func (mmOrderServiceSetStatus *mOrderServiceMockOrderServiceSetStatus) invocationsDone() bool {
	if len(mmOrderServiceSetStatus.expectations) == 0 && mmOrderServiceSetStatus.defaultExpectation == nil && mmOrderServiceSetStatus.mock.funcOrderServiceSetStatus == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderServiceSetStatus.mock.afterOrderServiceSetStatusCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderServiceSetStatus.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderServiceSetStatus implements handler.OrderService
func (mmOrderServiceSetStatus *OrderServiceMock) OrderServiceSetStatus(ctx context.Context, orderID model.OrderID, status model.Status) (err error) {
	mm_atomic.AddUint64(&mmOrderServiceSetStatus.beforeOrderServiceSetStatusCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderServiceSetStatus.afterOrderServiceSetStatusCounter, 1)

	if mmOrderServiceSetStatus.inspectFuncOrderServiceSetStatus != nil {
		mmOrderServiceSetStatus.inspectFuncOrderServiceSetStatus(ctx, orderID, status)
	}

	mm_params := OrderServiceMockOrderServiceSetStatusParams{ctx, orderID, status}

	// Record call args
	mmOrderServiceSetStatus.OrderServiceSetStatusMock.mutex.Lock()
	mmOrderServiceSetStatus.OrderServiceSetStatusMock.callArgs = append(mmOrderServiceSetStatus.OrderServiceSetStatusMock.callArgs, &mm_params)
	mmOrderServiceSetStatus.OrderServiceSetStatusMock.mutex.Unlock()

	for _, e := range mmOrderServiceSetStatus.OrderServiceSetStatusMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmOrderServiceSetStatus.OrderServiceSetStatusMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderServiceSetStatus.OrderServiceSetStatusMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderServiceSetStatus.OrderServiceSetStatusMock.defaultExpectation.params
		mm_want_ptrs := mmOrderServiceSetStatus.OrderServiceSetStatusMock.defaultExpectation.paramPtrs

		mm_got := OrderServiceMockOrderServiceSetStatusParams{ctx, orderID, status}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderServiceSetStatus.t.Errorf("OrderServiceMock.OrderServiceSetStatus got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.orderID != nil && !minimock.Equal(*mm_want_ptrs.orderID, mm_got.orderID) {
				mmOrderServiceSetStatus.t.Errorf("OrderServiceMock.OrderServiceSetStatus got unexpected parameter orderID, want: %#v, got: %#v%s\n", *mm_want_ptrs.orderID, mm_got.orderID, minimock.Diff(*mm_want_ptrs.orderID, mm_got.orderID))
			}

			if mm_want_ptrs.status != nil && !minimock.Equal(*mm_want_ptrs.status, mm_got.status) {
				mmOrderServiceSetStatus.t.Errorf("OrderServiceMock.OrderServiceSetStatus got unexpected parameter status, want: %#v, got: %#v%s\n", *mm_want_ptrs.status, mm_got.status, minimock.Diff(*mm_want_ptrs.status, mm_got.status))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderServiceSetStatus.t.Errorf("OrderServiceMock.OrderServiceSetStatus got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderServiceSetStatus.OrderServiceSetStatusMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderServiceSetStatus.t.Fatal("No results are set for the OrderServiceMock.OrderServiceSetStatus")
		}
		return (*mm_results).err
	}
	if mmOrderServiceSetStatus.funcOrderServiceSetStatus != nil {
		return mmOrderServiceSetStatus.funcOrderServiceSetStatus(ctx, orderID, status)
	}
	mmOrderServiceSetStatus.t.Fatalf("Unexpected call to OrderServiceMock.OrderServiceSetStatus. %v %v %v", ctx, orderID, status)
	return
}

// OrderServiceSetStatusAfterCounter returns a count of finished OrderServiceMock.OrderServiceSetStatus invocations
func (mmOrderServiceSetStatus *OrderServiceMock) OrderServiceSetStatusAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderServiceSetStatus.afterOrderServiceSetStatusCounter)
}

// OrderServiceSetStatusBeforeCounter returns a count of OrderServiceMock.OrderServiceSetStatus invocations
func (mmOrderServiceSetStatus *OrderServiceMock) OrderServiceSetStatusBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderServiceSetStatus.beforeOrderServiceSetStatusCounter)
}

// Calls returns a list of arguments used in each call to OrderServiceMock.OrderServiceSetStatus.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderServiceSetStatus *mOrderServiceMockOrderServiceSetStatus) Calls() []*OrderServiceMockOrderServiceSetStatusParams {
	mmOrderServiceSetStatus.mutex.RLock()

	argCopy := make([]*OrderServiceMockOrderServiceSetStatusParams, len(mmOrderServiceSetStatus.callArgs))
	copy(argCopy, mmOrderServiceSetStatus.callArgs)

	mmOrderServiceSetStatus.mutex.RUnlock()

	return argCopy
}

// MinimockOrderServiceSetStatusDone returns true if the count of the OrderServiceSetStatus invocations corresponds
// the number of defined expectations
func (m *OrderServiceMock) MinimockOrderServiceSetStatusDone() bool {
	if m.OrderServiceSetStatusMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderServiceSetStatusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderServiceSetStatusMock.invocationsDone()
}

// MinimockOrderServiceSetStatusInspect logs each unmet expectation
func (m *OrderServiceMock) MinimockOrderServiceSetStatusInspect() {
	for _, e := range m.OrderServiceSetStatusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderServiceMock.OrderServiceSetStatus with params: %#v", *e.params)
		}
	}

	afterOrderServiceSetStatusCounter := mm_atomic.LoadUint64(&m.afterOrderServiceSetStatusCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderServiceSetStatusMock.defaultExpectation != nil && afterOrderServiceSetStatusCounter < 1 {
		if m.OrderServiceSetStatusMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderServiceMock.OrderServiceSetStatus")
		} else {
			m.t.Errorf("Expected call to OrderServiceMock.OrderServiceSetStatus with params: %#v", *m.OrderServiceSetStatusMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderServiceSetStatus != nil && afterOrderServiceSetStatusCounter < 1 {
		m.t.Error("Expected call to OrderServiceMock.OrderServiceSetStatus")
	}

	if !m.OrderServiceSetStatusMock.invocationsDone() && afterOrderServiceSetStatusCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderServiceMock.OrderServiceSetStatus but found %d calls",
			mm_atomic.LoadUint64(&m.OrderServiceSetStatusMock.expectedInvocations), afterOrderServiceSetStatusCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockOrderServiceCreateInspect()

			m.MinimockOrderServiceGetOrderInspect()

			m.MinimockOrderServiceSetStatusInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockOrderServiceCreateDone() &&
		m.MinimockOrderServiceGetOrderDone() &&
		m.MinimockOrderServiceSetStatusDone()
}
