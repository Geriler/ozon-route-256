// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package mock

//go:generate minimock -i route256/loms/internal/app/stocks/handler.StocksService -o stocks_service_mock.go -n StocksServiceMock -p mock

import (
	"context"
	orderModel "route256/loms/internal/order/model"
	stocksModel "route256/loms/internal/stocks/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StocksServiceMock implements handler.StocksService
type StocksServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetBySKU          func(ctx context.Context, sku stocksModel.SKU) (sp1 *stocksModel.Stocks, err error)
	inspectFuncGetBySKU   func(ctx context.Context, sku stocksModel.SKU)
	afterGetBySKUCounter  uint64
	beforeGetBySKUCounter uint64
	GetBySKUMock          mStocksServiceMockGetBySKU

	funcReserve          func(ctx context.Context, items []*orderModel.Item) (err error)
	inspectFuncReserve   func(ctx context.Context, items []*orderModel.Item)
	afterReserveCounter  uint64
	beforeReserveCounter uint64
	ReserveMock          mStocksServiceMockReserve

	funcReserveCancel          func(ctx context.Context, items []*orderModel.Item) (err error)
	inspectFuncReserveCancel   func(ctx context.Context, items []*orderModel.Item)
	afterReserveCancelCounter  uint64
	beforeReserveCancelCounter uint64
	ReserveCancelMock          mStocksServiceMockReserveCancel

	funcReserveRemove          func(ctx context.Context, items []*orderModel.Item) (err error)
	inspectFuncReserveRemove   func(ctx context.Context, items []*orderModel.Item)
	afterReserveRemoveCounter  uint64
	beforeReserveRemoveCounter uint64
	ReserveRemoveMock          mStocksServiceMockReserveRemove
}

// NewStocksServiceMock returns a mock for handler.StocksService
func NewStocksServiceMock(t minimock.Tester) *StocksServiceMock {
	m := &StocksServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetBySKUMock = mStocksServiceMockGetBySKU{mock: m}
	m.GetBySKUMock.callArgs = []*StocksServiceMockGetBySKUParams{}

	m.ReserveMock = mStocksServiceMockReserve{mock: m}
	m.ReserveMock.callArgs = []*StocksServiceMockReserveParams{}

	m.ReserveCancelMock = mStocksServiceMockReserveCancel{mock: m}
	m.ReserveCancelMock.callArgs = []*StocksServiceMockReserveCancelParams{}

	m.ReserveRemoveMock = mStocksServiceMockReserveRemove{mock: m}
	m.ReserveRemoveMock.callArgs = []*StocksServiceMockReserveRemoveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStocksServiceMockGetBySKU struct {
	optional           bool
	mock               *StocksServiceMock
	defaultExpectation *StocksServiceMockGetBySKUExpectation
	expectations       []*StocksServiceMockGetBySKUExpectation

	callArgs []*StocksServiceMockGetBySKUParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// StocksServiceMockGetBySKUExpectation specifies expectation struct of the StocksService.GetBySKU
type StocksServiceMockGetBySKUExpectation struct {
	mock      *StocksServiceMock
	params    *StocksServiceMockGetBySKUParams
	paramPtrs *StocksServiceMockGetBySKUParamPtrs
	results   *StocksServiceMockGetBySKUResults
	Counter   uint64
}

// StocksServiceMockGetBySKUParams contains parameters of the StocksService.GetBySKU
type StocksServiceMockGetBySKUParams struct {
	ctx context.Context
	sku stocksModel.SKU
}

// StocksServiceMockGetBySKUParamPtrs contains pointers to parameters of the StocksService.GetBySKU
type StocksServiceMockGetBySKUParamPtrs struct {
	ctx *context.Context
	sku *stocksModel.SKU
}

// StocksServiceMockGetBySKUResults contains results of the StocksService.GetBySKU
type StocksServiceMockGetBySKUResults struct {
	sp1 *stocksModel.Stocks
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetBySKU *mStocksServiceMockGetBySKU) Optional() *mStocksServiceMockGetBySKU {
	mmGetBySKU.optional = true
	return mmGetBySKU
}

// Expect sets up expected params for StocksService.GetBySKU
func (mmGetBySKU *mStocksServiceMockGetBySKU) Expect(ctx context.Context, sku stocksModel.SKU) *mStocksServiceMockGetBySKU {
	if mmGetBySKU.mock.funcGetBySKU != nil {
		mmGetBySKU.mock.t.Fatalf("StocksServiceMock.GetBySKU mock is already set by Set")
	}

	if mmGetBySKU.defaultExpectation == nil {
		mmGetBySKU.defaultExpectation = &StocksServiceMockGetBySKUExpectation{}
	}

	if mmGetBySKU.defaultExpectation.paramPtrs != nil {
		mmGetBySKU.mock.t.Fatalf("StocksServiceMock.GetBySKU mock is already set by ExpectParams functions")
	}

	mmGetBySKU.defaultExpectation.params = &StocksServiceMockGetBySKUParams{ctx, sku}
	for _, e := range mmGetBySKU.expectations {
		if minimock.Equal(e.params, mmGetBySKU.defaultExpectation.params) {
			mmGetBySKU.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetBySKU.defaultExpectation.params)
		}
	}

	return mmGetBySKU
}

// ExpectCtxParam1 sets up expected param ctx for StocksService.GetBySKU
func (mmGetBySKU *mStocksServiceMockGetBySKU) ExpectCtxParam1(ctx context.Context) *mStocksServiceMockGetBySKU {
	if mmGetBySKU.mock.funcGetBySKU != nil {
		mmGetBySKU.mock.t.Fatalf("StocksServiceMock.GetBySKU mock is already set by Set")
	}

	if mmGetBySKU.defaultExpectation == nil {
		mmGetBySKU.defaultExpectation = &StocksServiceMockGetBySKUExpectation{}
	}

	if mmGetBySKU.defaultExpectation.params != nil {
		mmGetBySKU.mock.t.Fatalf("StocksServiceMock.GetBySKU mock is already set by Expect")
	}

	if mmGetBySKU.defaultExpectation.paramPtrs == nil {
		mmGetBySKU.defaultExpectation.paramPtrs = &StocksServiceMockGetBySKUParamPtrs{}
	}
	mmGetBySKU.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetBySKU
}

// ExpectSkuParam2 sets up expected param sku for StocksService.GetBySKU
func (mmGetBySKU *mStocksServiceMockGetBySKU) ExpectSkuParam2(sku stocksModel.SKU) *mStocksServiceMockGetBySKU {
	if mmGetBySKU.mock.funcGetBySKU != nil {
		mmGetBySKU.mock.t.Fatalf("StocksServiceMock.GetBySKU mock is already set by Set")
	}

	if mmGetBySKU.defaultExpectation == nil {
		mmGetBySKU.defaultExpectation = &StocksServiceMockGetBySKUExpectation{}
	}

	if mmGetBySKU.defaultExpectation.params != nil {
		mmGetBySKU.mock.t.Fatalf("StocksServiceMock.GetBySKU mock is already set by Expect")
	}

	if mmGetBySKU.defaultExpectation.paramPtrs == nil {
		mmGetBySKU.defaultExpectation.paramPtrs = &StocksServiceMockGetBySKUParamPtrs{}
	}
	mmGetBySKU.defaultExpectation.paramPtrs.sku = &sku

	return mmGetBySKU
}

// Inspect accepts an inspector function that has same arguments as the StocksService.GetBySKU
func (mmGetBySKU *mStocksServiceMockGetBySKU) Inspect(f func(ctx context.Context, sku stocksModel.SKU)) *mStocksServiceMockGetBySKU {
	if mmGetBySKU.mock.inspectFuncGetBySKU != nil {
		mmGetBySKU.mock.t.Fatalf("Inspect function is already set for StocksServiceMock.GetBySKU")
	}

	mmGetBySKU.mock.inspectFuncGetBySKU = f

	return mmGetBySKU
}

// Return sets up results that will be returned by StocksService.GetBySKU
func (mmGetBySKU *mStocksServiceMockGetBySKU) Return(sp1 *stocksModel.Stocks, err error) *StocksServiceMock {
	if mmGetBySKU.mock.funcGetBySKU != nil {
		mmGetBySKU.mock.t.Fatalf("StocksServiceMock.GetBySKU mock is already set by Set")
	}

	if mmGetBySKU.defaultExpectation == nil {
		mmGetBySKU.defaultExpectation = &StocksServiceMockGetBySKUExpectation{mock: mmGetBySKU.mock}
	}
	mmGetBySKU.defaultExpectation.results = &StocksServiceMockGetBySKUResults{sp1, err}
	return mmGetBySKU.mock
}

// Set uses given function f to mock the StocksService.GetBySKU method
func (mmGetBySKU *mStocksServiceMockGetBySKU) Set(f func(ctx context.Context, sku stocksModel.SKU) (sp1 *stocksModel.Stocks, err error)) *StocksServiceMock {
	if mmGetBySKU.defaultExpectation != nil {
		mmGetBySKU.mock.t.Fatalf("Default expectation is already set for the StocksService.GetBySKU method")
	}

	if len(mmGetBySKU.expectations) > 0 {
		mmGetBySKU.mock.t.Fatalf("Some expectations are already set for the StocksService.GetBySKU method")
	}

	mmGetBySKU.mock.funcGetBySKU = f
	return mmGetBySKU.mock
}

// When sets expectation for the StocksService.GetBySKU which will trigger the result defined by the following
// Then helper
func (mmGetBySKU *mStocksServiceMockGetBySKU) When(ctx context.Context, sku stocksModel.SKU) *StocksServiceMockGetBySKUExpectation {
	if mmGetBySKU.mock.funcGetBySKU != nil {
		mmGetBySKU.mock.t.Fatalf("StocksServiceMock.GetBySKU mock is already set by Set")
	}

	expectation := &StocksServiceMockGetBySKUExpectation{
		mock:   mmGetBySKU.mock,
		params: &StocksServiceMockGetBySKUParams{ctx, sku},
	}
	mmGetBySKU.expectations = append(mmGetBySKU.expectations, expectation)
	return expectation
}

// Then sets up StocksService.GetBySKU return parameters for the expectation previously defined by the When method
func (e *StocksServiceMockGetBySKUExpectation) Then(sp1 *stocksModel.Stocks, err error) *StocksServiceMock {
	e.results = &StocksServiceMockGetBySKUResults{sp1, err}
	return e.mock
}

// Times sets number of times StocksService.GetBySKU should be invoked
func (mmGetBySKU *mStocksServiceMockGetBySKU) Times(n uint64) *mStocksServiceMockGetBySKU {
	if n == 0 {
		mmGetBySKU.mock.t.Fatalf("Times of StocksServiceMock.GetBySKU mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetBySKU.expectedInvocations, n)
	return mmGetBySKU
}

func (mmGetBySKU *mStocksServiceMockGetBySKU) invocationsDone() bool {
	if len(mmGetBySKU.expectations) == 0 && mmGetBySKU.defaultExpectation == nil && mmGetBySKU.mock.funcGetBySKU == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetBySKU.mock.afterGetBySKUCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetBySKU.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetBySKU implements handler.StocksService
func (mmGetBySKU *StocksServiceMock) GetBySKU(ctx context.Context, sku stocksModel.SKU) (sp1 *stocksModel.Stocks, err error) {
	mm_atomic.AddUint64(&mmGetBySKU.beforeGetBySKUCounter, 1)
	defer mm_atomic.AddUint64(&mmGetBySKU.afterGetBySKUCounter, 1)

	if mmGetBySKU.inspectFuncGetBySKU != nil {
		mmGetBySKU.inspectFuncGetBySKU(ctx, sku)
	}

	mm_params := StocksServiceMockGetBySKUParams{ctx, sku}

	// Record call args
	mmGetBySKU.GetBySKUMock.mutex.Lock()
	mmGetBySKU.GetBySKUMock.callArgs = append(mmGetBySKU.GetBySKUMock.callArgs, &mm_params)
	mmGetBySKU.GetBySKUMock.mutex.Unlock()

	for _, e := range mmGetBySKU.GetBySKUMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmGetBySKU.GetBySKUMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetBySKU.GetBySKUMock.defaultExpectation.Counter, 1)
		mm_want := mmGetBySKU.GetBySKUMock.defaultExpectation.params
		mm_want_ptrs := mmGetBySKU.GetBySKUMock.defaultExpectation.paramPtrs

		mm_got := StocksServiceMockGetBySKUParams{ctx, sku}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetBySKU.t.Errorf("StocksServiceMock.GetBySKU got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.sku != nil && !minimock.Equal(*mm_want_ptrs.sku, mm_got.sku) {
				mmGetBySKU.t.Errorf("StocksServiceMock.GetBySKU got unexpected parameter sku, want: %#v, got: %#v%s\n", *mm_want_ptrs.sku, mm_got.sku, minimock.Diff(*mm_want_ptrs.sku, mm_got.sku))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetBySKU.t.Errorf("StocksServiceMock.GetBySKU got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetBySKU.GetBySKUMock.defaultExpectation.results
		if mm_results == nil {
			mmGetBySKU.t.Fatal("No results are set for the StocksServiceMock.GetBySKU")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmGetBySKU.funcGetBySKU != nil {
		return mmGetBySKU.funcGetBySKU(ctx, sku)
	}
	mmGetBySKU.t.Fatalf("Unexpected call to StocksServiceMock.GetBySKU. %v %v", ctx, sku)
	return
}

// GetBySKUAfterCounter returns a count of finished StocksServiceMock.GetBySKU invocations
func (mmGetBySKU *StocksServiceMock) GetBySKUAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetBySKU.afterGetBySKUCounter)
}

// GetBySKUBeforeCounter returns a count of StocksServiceMock.GetBySKU invocations
func (mmGetBySKU *StocksServiceMock) GetBySKUBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetBySKU.beforeGetBySKUCounter)
}

// Calls returns a list of arguments used in each call to StocksServiceMock.GetBySKU.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetBySKU *mStocksServiceMockGetBySKU) Calls() []*StocksServiceMockGetBySKUParams {
	mmGetBySKU.mutex.RLock()

	argCopy := make([]*StocksServiceMockGetBySKUParams, len(mmGetBySKU.callArgs))
	copy(argCopy, mmGetBySKU.callArgs)

	mmGetBySKU.mutex.RUnlock()

	return argCopy
}

// MinimockGetBySKUDone returns true if the count of the GetBySKU invocations corresponds
// the number of defined expectations
func (m *StocksServiceMock) MinimockGetBySKUDone() bool {
	if m.GetBySKUMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetBySKUMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetBySKUMock.invocationsDone()
}

// MinimockGetBySKUInspect logs each unmet expectation
func (m *StocksServiceMock) MinimockGetBySKUInspect() {
	for _, e := range m.GetBySKUMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StocksServiceMock.GetBySKU with params: %#v", *e.params)
		}
	}

	afterGetBySKUCounter := mm_atomic.LoadUint64(&m.afterGetBySKUCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetBySKUMock.defaultExpectation != nil && afterGetBySKUCounter < 1 {
		if m.GetBySKUMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StocksServiceMock.GetBySKU")
		} else {
			m.t.Errorf("Expected call to StocksServiceMock.GetBySKU with params: %#v", *m.GetBySKUMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetBySKU != nil && afterGetBySKUCounter < 1 {
		m.t.Error("Expected call to StocksServiceMock.GetBySKU")
	}

	if !m.GetBySKUMock.invocationsDone() && afterGetBySKUCounter > 0 {
		m.t.Errorf("Expected %d calls to StocksServiceMock.GetBySKU but found %d calls",
			mm_atomic.LoadUint64(&m.GetBySKUMock.expectedInvocations), afterGetBySKUCounter)
	}
}

type mStocksServiceMockReserve struct {
	optional           bool
	mock               *StocksServiceMock
	defaultExpectation *StocksServiceMockReserveExpectation
	expectations       []*StocksServiceMockReserveExpectation

	callArgs []*StocksServiceMockReserveParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// StocksServiceMockReserveExpectation specifies expectation struct of the StocksService.Reserve
type StocksServiceMockReserveExpectation struct {
	mock      *StocksServiceMock
	params    *StocksServiceMockReserveParams
	paramPtrs *StocksServiceMockReserveParamPtrs
	results   *StocksServiceMockReserveResults
	Counter   uint64
}

// StocksServiceMockReserveParams contains parameters of the StocksService.Reserve
type StocksServiceMockReserveParams struct {
	ctx   context.Context
	items []*orderModel.Item
}

// StocksServiceMockReserveParamPtrs contains pointers to parameters of the StocksService.Reserve
type StocksServiceMockReserveParamPtrs struct {
	ctx   *context.Context
	items *[]*orderModel.Item
}

// StocksServiceMockReserveResults contains results of the StocksService.Reserve
type StocksServiceMockReserveResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserve *mStocksServiceMockReserve) Optional() *mStocksServiceMockReserve {
	mmReserve.optional = true
	return mmReserve
}

// Expect sets up expected params for StocksService.Reserve
func (mmReserve *mStocksServiceMockReserve) Expect(ctx context.Context, items []*orderModel.Item) *mStocksServiceMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StocksServiceMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StocksServiceMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.paramPtrs != nil {
		mmReserve.mock.t.Fatalf("StocksServiceMock.Reserve mock is already set by ExpectParams functions")
	}

	mmReserve.defaultExpectation.params = &StocksServiceMockReserveParams{ctx, items}
	for _, e := range mmReserve.expectations {
		if minimock.Equal(e.params, mmReserve.defaultExpectation.params) {
			mmReserve.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserve.defaultExpectation.params)
		}
	}

	return mmReserve
}

// ExpectCtxParam1 sets up expected param ctx for StocksService.Reserve
func (mmReserve *mStocksServiceMockReserve) ExpectCtxParam1(ctx context.Context) *mStocksServiceMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StocksServiceMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StocksServiceMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.params != nil {
		mmReserve.mock.t.Fatalf("StocksServiceMock.Reserve mock is already set by Expect")
	}

	if mmReserve.defaultExpectation.paramPtrs == nil {
		mmReserve.defaultExpectation.paramPtrs = &StocksServiceMockReserveParamPtrs{}
	}
	mmReserve.defaultExpectation.paramPtrs.ctx = &ctx

	return mmReserve
}

// ExpectItemsParam2 sets up expected param items for StocksService.Reserve
func (mmReserve *mStocksServiceMockReserve) ExpectItemsParam2(items []*orderModel.Item) *mStocksServiceMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StocksServiceMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StocksServiceMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.params != nil {
		mmReserve.mock.t.Fatalf("StocksServiceMock.Reserve mock is already set by Expect")
	}

	if mmReserve.defaultExpectation.paramPtrs == nil {
		mmReserve.defaultExpectation.paramPtrs = &StocksServiceMockReserveParamPtrs{}
	}
	mmReserve.defaultExpectation.paramPtrs.items = &items

	return mmReserve
}

// Inspect accepts an inspector function that has same arguments as the StocksService.Reserve
func (mmReserve *mStocksServiceMockReserve) Inspect(f func(ctx context.Context, items []*orderModel.Item)) *mStocksServiceMockReserve {
	if mmReserve.mock.inspectFuncReserve != nil {
		mmReserve.mock.t.Fatalf("Inspect function is already set for StocksServiceMock.Reserve")
	}

	mmReserve.mock.inspectFuncReserve = f

	return mmReserve
}

// Return sets up results that will be returned by StocksService.Reserve
func (mmReserve *mStocksServiceMockReserve) Return(err error) *StocksServiceMock {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StocksServiceMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StocksServiceMockReserveExpectation{mock: mmReserve.mock}
	}
	mmReserve.defaultExpectation.results = &StocksServiceMockReserveResults{err}
	return mmReserve.mock
}

// Set uses given function f to mock the StocksService.Reserve method
func (mmReserve *mStocksServiceMockReserve) Set(f func(ctx context.Context, items []*orderModel.Item) (err error)) *StocksServiceMock {
	if mmReserve.defaultExpectation != nil {
		mmReserve.mock.t.Fatalf("Default expectation is already set for the StocksService.Reserve method")
	}

	if len(mmReserve.expectations) > 0 {
		mmReserve.mock.t.Fatalf("Some expectations are already set for the StocksService.Reserve method")
	}

	mmReserve.mock.funcReserve = f
	return mmReserve.mock
}

// When sets expectation for the StocksService.Reserve which will trigger the result defined by the following
// Then helper
func (mmReserve *mStocksServiceMockReserve) When(ctx context.Context, items []*orderModel.Item) *StocksServiceMockReserveExpectation {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StocksServiceMock.Reserve mock is already set by Set")
	}

	expectation := &StocksServiceMockReserveExpectation{
		mock:   mmReserve.mock,
		params: &StocksServiceMockReserveParams{ctx, items},
	}
	mmReserve.expectations = append(mmReserve.expectations, expectation)
	return expectation
}

// Then sets up StocksService.Reserve return parameters for the expectation previously defined by the When method
func (e *StocksServiceMockReserveExpectation) Then(err error) *StocksServiceMock {
	e.results = &StocksServiceMockReserveResults{err}
	return e.mock
}

// Times sets number of times StocksService.Reserve should be invoked
func (mmReserve *mStocksServiceMockReserve) Times(n uint64) *mStocksServiceMockReserve {
	if n == 0 {
		mmReserve.mock.t.Fatalf("Times of StocksServiceMock.Reserve mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserve.expectedInvocations, n)
	return mmReserve
}

func (mmReserve *mStocksServiceMockReserve) invocationsDone() bool {
	if len(mmReserve.expectations) == 0 && mmReserve.defaultExpectation == nil && mmReserve.mock.funcReserve == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserve.mock.afterReserveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserve.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Reserve implements handler.StocksService
func (mmReserve *StocksServiceMock) Reserve(ctx context.Context, items []*orderModel.Item) (err error) {
	mm_atomic.AddUint64(&mmReserve.beforeReserveCounter, 1)
	defer mm_atomic.AddUint64(&mmReserve.afterReserveCounter, 1)

	if mmReserve.inspectFuncReserve != nil {
		mmReserve.inspectFuncReserve(ctx, items)
	}

	mm_params := StocksServiceMockReserveParams{ctx, items}

	// Record call args
	mmReserve.ReserveMock.mutex.Lock()
	mmReserve.ReserveMock.callArgs = append(mmReserve.ReserveMock.callArgs, &mm_params)
	mmReserve.ReserveMock.mutex.Unlock()

	for _, e := range mmReserve.ReserveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserve.ReserveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserve.ReserveMock.defaultExpectation.Counter, 1)
		mm_want := mmReserve.ReserveMock.defaultExpectation.params
		mm_want_ptrs := mmReserve.ReserveMock.defaultExpectation.paramPtrs

		mm_got := StocksServiceMockReserveParams{ctx, items}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserve.t.Errorf("StocksServiceMock.Reserve got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.items != nil && !minimock.Equal(*mm_want_ptrs.items, mm_got.items) {
				mmReserve.t.Errorf("StocksServiceMock.Reserve got unexpected parameter items, want: %#v, got: %#v%s\n", *mm_want_ptrs.items, mm_got.items, minimock.Diff(*mm_want_ptrs.items, mm_got.items))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserve.t.Errorf("StocksServiceMock.Reserve got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserve.ReserveMock.defaultExpectation.results
		if mm_results == nil {
			mmReserve.t.Fatal("No results are set for the StocksServiceMock.Reserve")
		}
		return (*mm_results).err
	}
	if mmReserve.funcReserve != nil {
		return mmReserve.funcReserve(ctx, items)
	}
	mmReserve.t.Fatalf("Unexpected call to StocksServiceMock.Reserve. %v %v", ctx, items)
	return
}

// ReserveAfterCounter returns a count of finished StocksServiceMock.Reserve invocations
func (mmReserve *StocksServiceMock) ReserveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserve.afterReserveCounter)
}

// ReserveBeforeCounter returns a count of StocksServiceMock.Reserve invocations
func (mmReserve *StocksServiceMock) ReserveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserve.beforeReserveCounter)
}

// Calls returns a list of arguments used in each call to StocksServiceMock.Reserve.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserve *mStocksServiceMockReserve) Calls() []*StocksServiceMockReserveParams {
	mmReserve.mutex.RLock()

	argCopy := make([]*StocksServiceMockReserveParams, len(mmReserve.callArgs))
	copy(argCopy, mmReserve.callArgs)

	mmReserve.mutex.RUnlock()

	return argCopy
}

// MinimockReserveDone returns true if the count of the Reserve invocations corresponds
// the number of defined expectations
func (m *StocksServiceMock) MinimockReserveDone() bool {
	if m.ReserveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveMock.invocationsDone()
}

// MinimockReserveInspect logs each unmet expectation
func (m *StocksServiceMock) MinimockReserveInspect() {
	for _, e := range m.ReserveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StocksServiceMock.Reserve with params: %#v", *e.params)
		}
	}

	afterReserveCounter := mm_atomic.LoadUint64(&m.afterReserveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveMock.defaultExpectation != nil && afterReserveCounter < 1 {
		if m.ReserveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StocksServiceMock.Reserve")
		} else {
			m.t.Errorf("Expected call to StocksServiceMock.Reserve with params: %#v", *m.ReserveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserve != nil && afterReserveCounter < 1 {
		m.t.Error("Expected call to StocksServiceMock.Reserve")
	}

	if !m.ReserveMock.invocationsDone() && afterReserveCounter > 0 {
		m.t.Errorf("Expected %d calls to StocksServiceMock.Reserve but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveMock.expectedInvocations), afterReserveCounter)
	}
}

type mStocksServiceMockReserveCancel struct {
	optional           bool
	mock               *StocksServiceMock
	defaultExpectation *StocksServiceMockReserveCancelExpectation
	expectations       []*StocksServiceMockReserveCancelExpectation

	callArgs []*StocksServiceMockReserveCancelParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// StocksServiceMockReserveCancelExpectation specifies expectation struct of the StocksService.ReserveCancel
type StocksServiceMockReserveCancelExpectation struct {
	mock      *StocksServiceMock
	params    *StocksServiceMockReserveCancelParams
	paramPtrs *StocksServiceMockReserveCancelParamPtrs
	results   *StocksServiceMockReserveCancelResults
	Counter   uint64
}

// StocksServiceMockReserveCancelParams contains parameters of the StocksService.ReserveCancel
type StocksServiceMockReserveCancelParams struct {
	ctx   context.Context
	items []*orderModel.Item
}

// StocksServiceMockReserveCancelParamPtrs contains pointers to parameters of the StocksService.ReserveCancel
type StocksServiceMockReserveCancelParamPtrs struct {
	ctx   *context.Context
	items *[]*orderModel.Item
}

// StocksServiceMockReserveCancelResults contains results of the StocksService.ReserveCancel
type StocksServiceMockReserveCancelResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserveCancel *mStocksServiceMockReserveCancel) Optional() *mStocksServiceMockReserveCancel {
	mmReserveCancel.optional = true
	return mmReserveCancel
}

// Expect sets up expected params for StocksService.ReserveCancel
func (mmReserveCancel *mStocksServiceMockReserveCancel) Expect(ctx context.Context, items []*orderModel.Item) *mStocksServiceMockReserveCancel {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("StocksServiceMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &StocksServiceMockReserveCancelExpectation{}
	}

	if mmReserveCancel.defaultExpectation.paramPtrs != nil {
		mmReserveCancel.mock.t.Fatalf("StocksServiceMock.ReserveCancel mock is already set by ExpectParams functions")
	}

	mmReserveCancel.defaultExpectation.params = &StocksServiceMockReserveCancelParams{ctx, items}
	for _, e := range mmReserveCancel.expectations {
		if minimock.Equal(e.params, mmReserveCancel.defaultExpectation.params) {
			mmReserveCancel.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserveCancel.defaultExpectation.params)
		}
	}

	return mmReserveCancel
}

// ExpectCtxParam1 sets up expected param ctx for StocksService.ReserveCancel
func (mmReserveCancel *mStocksServiceMockReserveCancel) ExpectCtxParam1(ctx context.Context) *mStocksServiceMockReserveCancel {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("StocksServiceMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &StocksServiceMockReserveCancelExpectation{}
	}

	if mmReserveCancel.defaultExpectation.params != nil {
		mmReserveCancel.mock.t.Fatalf("StocksServiceMock.ReserveCancel mock is already set by Expect")
	}

	if mmReserveCancel.defaultExpectation.paramPtrs == nil {
		mmReserveCancel.defaultExpectation.paramPtrs = &StocksServiceMockReserveCancelParamPtrs{}
	}
	mmReserveCancel.defaultExpectation.paramPtrs.ctx = &ctx

	return mmReserveCancel
}

// ExpectItemsParam2 sets up expected param items for StocksService.ReserveCancel
func (mmReserveCancel *mStocksServiceMockReserveCancel) ExpectItemsParam2(items []*orderModel.Item) *mStocksServiceMockReserveCancel {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("StocksServiceMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &StocksServiceMockReserveCancelExpectation{}
	}

	if mmReserveCancel.defaultExpectation.params != nil {
		mmReserveCancel.mock.t.Fatalf("StocksServiceMock.ReserveCancel mock is already set by Expect")
	}

	if mmReserveCancel.defaultExpectation.paramPtrs == nil {
		mmReserveCancel.defaultExpectation.paramPtrs = &StocksServiceMockReserveCancelParamPtrs{}
	}
	mmReserveCancel.defaultExpectation.paramPtrs.items = &items

	return mmReserveCancel
}

// Inspect accepts an inspector function that has same arguments as the StocksService.ReserveCancel
func (mmReserveCancel *mStocksServiceMockReserveCancel) Inspect(f func(ctx context.Context, items []*orderModel.Item)) *mStocksServiceMockReserveCancel {
	if mmReserveCancel.mock.inspectFuncReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("Inspect function is already set for StocksServiceMock.ReserveCancel")
	}

	mmReserveCancel.mock.inspectFuncReserveCancel = f

	return mmReserveCancel
}

// Return sets up results that will be returned by StocksService.ReserveCancel
func (mmReserveCancel *mStocksServiceMockReserveCancel) Return(err error) *StocksServiceMock {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("StocksServiceMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &StocksServiceMockReserveCancelExpectation{mock: mmReserveCancel.mock}
	}
	mmReserveCancel.defaultExpectation.results = &StocksServiceMockReserveCancelResults{err}
	return mmReserveCancel.mock
}

// Set uses given function f to mock the StocksService.ReserveCancel method
func (mmReserveCancel *mStocksServiceMockReserveCancel) Set(f func(ctx context.Context, items []*orderModel.Item) (err error)) *StocksServiceMock {
	if mmReserveCancel.defaultExpectation != nil {
		mmReserveCancel.mock.t.Fatalf("Default expectation is already set for the StocksService.ReserveCancel method")
	}

	if len(mmReserveCancel.expectations) > 0 {
		mmReserveCancel.mock.t.Fatalf("Some expectations are already set for the StocksService.ReserveCancel method")
	}

	mmReserveCancel.mock.funcReserveCancel = f
	return mmReserveCancel.mock
}

// When sets expectation for the StocksService.ReserveCancel which will trigger the result defined by the following
// Then helper
func (mmReserveCancel *mStocksServiceMockReserveCancel) When(ctx context.Context, items []*orderModel.Item) *StocksServiceMockReserveCancelExpectation {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("StocksServiceMock.ReserveCancel mock is already set by Set")
	}

	expectation := &StocksServiceMockReserveCancelExpectation{
		mock:   mmReserveCancel.mock,
		params: &StocksServiceMockReserveCancelParams{ctx, items},
	}
	mmReserveCancel.expectations = append(mmReserveCancel.expectations, expectation)
	return expectation
}

// Then sets up StocksService.ReserveCancel return parameters for the expectation previously defined by the When method
func (e *StocksServiceMockReserveCancelExpectation) Then(err error) *StocksServiceMock {
	e.results = &StocksServiceMockReserveCancelResults{err}
	return e.mock
}

// Times sets number of times StocksService.ReserveCancel should be invoked
func (mmReserveCancel *mStocksServiceMockReserveCancel) Times(n uint64) *mStocksServiceMockReserveCancel {
	if n == 0 {
		mmReserveCancel.mock.t.Fatalf("Times of StocksServiceMock.ReserveCancel mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserveCancel.expectedInvocations, n)
	return mmReserveCancel
}

func (mmReserveCancel *mStocksServiceMockReserveCancel) invocationsDone() bool {
	if len(mmReserveCancel.expectations) == 0 && mmReserveCancel.defaultExpectation == nil && mmReserveCancel.mock.funcReserveCancel == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserveCancel.mock.afterReserveCancelCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserveCancel.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ReserveCancel implements handler.StocksService
func (mmReserveCancel *StocksServiceMock) ReserveCancel(ctx context.Context, items []*orderModel.Item) (err error) {
	mm_atomic.AddUint64(&mmReserveCancel.beforeReserveCancelCounter, 1)
	defer mm_atomic.AddUint64(&mmReserveCancel.afterReserveCancelCounter, 1)

	if mmReserveCancel.inspectFuncReserveCancel != nil {
		mmReserveCancel.inspectFuncReserveCancel(ctx, items)
	}

	mm_params := StocksServiceMockReserveCancelParams{ctx, items}

	// Record call args
	mmReserveCancel.ReserveCancelMock.mutex.Lock()
	mmReserveCancel.ReserveCancelMock.callArgs = append(mmReserveCancel.ReserveCancelMock.callArgs, &mm_params)
	mmReserveCancel.ReserveCancelMock.mutex.Unlock()

	for _, e := range mmReserveCancel.ReserveCancelMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserveCancel.ReserveCancelMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserveCancel.ReserveCancelMock.defaultExpectation.Counter, 1)
		mm_want := mmReserveCancel.ReserveCancelMock.defaultExpectation.params
		mm_want_ptrs := mmReserveCancel.ReserveCancelMock.defaultExpectation.paramPtrs

		mm_got := StocksServiceMockReserveCancelParams{ctx, items}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserveCancel.t.Errorf("StocksServiceMock.ReserveCancel got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.items != nil && !minimock.Equal(*mm_want_ptrs.items, mm_got.items) {
				mmReserveCancel.t.Errorf("StocksServiceMock.ReserveCancel got unexpected parameter items, want: %#v, got: %#v%s\n", *mm_want_ptrs.items, mm_got.items, minimock.Diff(*mm_want_ptrs.items, mm_got.items))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserveCancel.t.Errorf("StocksServiceMock.ReserveCancel got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserveCancel.ReserveCancelMock.defaultExpectation.results
		if mm_results == nil {
			mmReserveCancel.t.Fatal("No results are set for the StocksServiceMock.ReserveCancel")
		}
		return (*mm_results).err
	}
	if mmReserveCancel.funcReserveCancel != nil {
		return mmReserveCancel.funcReserveCancel(ctx, items)
	}
	mmReserveCancel.t.Fatalf("Unexpected call to StocksServiceMock.ReserveCancel. %v %v", ctx, items)
	return
}

// ReserveCancelAfterCounter returns a count of finished StocksServiceMock.ReserveCancel invocations
func (mmReserveCancel *StocksServiceMock) ReserveCancelAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveCancel.afterReserveCancelCounter)
}

// ReserveCancelBeforeCounter returns a count of StocksServiceMock.ReserveCancel invocations
func (mmReserveCancel *StocksServiceMock) ReserveCancelBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveCancel.beforeReserveCancelCounter)
}

// Calls returns a list of arguments used in each call to StocksServiceMock.ReserveCancel.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserveCancel *mStocksServiceMockReserveCancel) Calls() []*StocksServiceMockReserveCancelParams {
	mmReserveCancel.mutex.RLock()

	argCopy := make([]*StocksServiceMockReserveCancelParams, len(mmReserveCancel.callArgs))
	copy(argCopy, mmReserveCancel.callArgs)

	mmReserveCancel.mutex.RUnlock()

	return argCopy
}

// MinimockReserveCancelDone returns true if the count of the ReserveCancel invocations corresponds
// the number of defined expectations
func (m *StocksServiceMock) MinimockReserveCancelDone() bool {
	if m.ReserveCancelMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveCancelMock.invocationsDone()
}

// MinimockReserveCancelInspect logs each unmet expectation
func (m *StocksServiceMock) MinimockReserveCancelInspect() {
	for _, e := range m.ReserveCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StocksServiceMock.ReserveCancel with params: %#v", *e.params)
		}
	}

	afterReserveCancelCounter := mm_atomic.LoadUint64(&m.afterReserveCancelCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveCancelMock.defaultExpectation != nil && afterReserveCancelCounter < 1 {
		if m.ReserveCancelMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StocksServiceMock.ReserveCancel")
		} else {
			m.t.Errorf("Expected call to StocksServiceMock.ReserveCancel with params: %#v", *m.ReserveCancelMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserveCancel != nil && afterReserveCancelCounter < 1 {
		m.t.Error("Expected call to StocksServiceMock.ReserveCancel")
	}

	if !m.ReserveCancelMock.invocationsDone() && afterReserveCancelCounter > 0 {
		m.t.Errorf("Expected %d calls to StocksServiceMock.ReserveCancel but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveCancelMock.expectedInvocations), afterReserveCancelCounter)
	}
}

type mStocksServiceMockReserveRemove struct {
	optional           bool
	mock               *StocksServiceMock
	defaultExpectation *StocksServiceMockReserveRemoveExpectation
	expectations       []*StocksServiceMockReserveRemoveExpectation

	callArgs []*StocksServiceMockReserveRemoveParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// StocksServiceMockReserveRemoveExpectation specifies expectation struct of the StocksService.ReserveRemove
type StocksServiceMockReserveRemoveExpectation struct {
	mock      *StocksServiceMock
	params    *StocksServiceMockReserveRemoveParams
	paramPtrs *StocksServiceMockReserveRemoveParamPtrs
	results   *StocksServiceMockReserveRemoveResults
	Counter   uint64
}

// StocksServiceMockReserveRemoveParams contains parameters of the StocksService.ReserveRemove
type StocksServiceMockReserveRemoveParams struct {
	ctx   context.Context
	items []*orderModel.Item
}

// StocksServiceMockReserveRemoveParamPtrs contains pointers to parameters of the StocksService.ReserveRemove
type StocksServiceMockReserveRemoveParamPtrs struct {
	ctx   *context.Context
	items *[]*orderModel.Item
}

// StocksServiceMockReserveRemoveResults contains results of the StocksService.ReserveRemove
type StocksServiceMockReserveRemoveResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserveRemove *mStocksServiceMockReserveRemove) Optional() *mStocksServiceMockReserveRemove {
	mmReserveRemove.optional = true
	return mmReserveRemove
}

// Expect sets up expected params for StocksService.ReserveRemove
func (mmReserveRemove *mStocksServiceMockReserveRemove) Expect(ctx context.Context, items []*orderModel.Item) *mStocksServiceMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StocksServiceMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &StocksServiceMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.paramPtrs != nil {
		mmReserveRemove.mock.t.Fatalf("StocksServiceMock.ReserveRemove mock is already set by ExpectParams functions")
	}

	mmReserveRemove.defaultExpectation.params = &StocksServiceMockReserveRemoveParams{ctx, items}
	for _, e := range mmReserveRemove.expectations {
		if minimock.Equal(e.params, mmReserveRemove.defaultExpectation.params) {
			mmReserveRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserveRemove.defaultExpectation.params)
		}
	}

	return mmReserveRemove
}

// ExpectCtxParam1 sets up expected param ctx for StocksService.ReserveRemove
func (mmReserveRemove *mStocksServiceMockReserveRemove) ExpectCtxParam1(ctx context.Context) *mStocksServiceMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StocksServiceMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &StocksServiceMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.params != nil {
		mmReserveRemove.mock.t.Fatalf("StocksServiceMock.ReserveRemove mock is already set by Expect")
	}

	if mmReserveRemove.defaultExpectation.paramPtrs == nil {
		mmReserveRemove.defaultExpectation.paramPtrs = &StocksServiceMockReserveRemoveParamPtrs{}
	}
	mmReserveRemove.defaultExpectation.paramPtrs.ctx = &ctx

	return mmReserveRemove
}

// ExpectItemsParam2 sets up expected param items for StocksService.ReserveRemove
func (mmReserveRemove *mStocksServiceMockReserveRemove) ExpectItemsParam2(items []*orderModel.Item) *mStocksServiceMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StocksServiceMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &StocksServiceMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.params != nil {
		mmReserveRemove.mock.t.Fatalf("StocksServiceMock.ReserveRemove mock is already set by Expect")
	}

	if mmReserveRemove.defaultExpectation.paramPtrs == nil {
		mmReserveRemove.defaultExpectation.paramPtrs = &StocksServiceMockReserveRemoveParamPtrs{}
	}
	mmReserveRemove.defaultExpectation.paramPtrs.items = &items

	return mmReserveRemove
}

// Inspect accepts an inspector function that has same arguments as the StocksService.ReserveRemove
func (mmReserveRemove *mStocksServiceMockReserveRemove) Inspect(f func(ctx context.Context, items []*orderModel.Item)) *mStocksServiceMockReserveRemove {
	if mmReserveRemove.mock.inspectFuncReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("Inspect function is already set for StocksServiceMock.ReserveRemove")
	}

	mmReserveRemove.mock.inspectFuncReserveRemove = f

	return mmReserveRemove
}

// Return sets up results that will be returned by StocksService.ReserveRemove
func (mmReserveRemove *mStocksServiceMockReserveRemove) Return(err error) *StocksServiceMock {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StocksServiceMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &StocksServiceMockReserveRemoveExpectation{mock: mmReserveRemove.mock}
	}
	mmReserveRemove.defaultExpectation.results = &StocksServiceMockReserveRemoveResults{err}
	return mmReserveRemove.mock
}

// Set uses given function f to mock the StocksService.ReserveRemove method
func (mmReserveRemove *mStocksServiceMockReserveRemove) Set(f func(ctx context.Context, items []*orderModel.Item) (err error)) *StocksServiceMock {
	if mmReserveRemove.defaultExpectation != nil {
		mmReserveRemove.mock.t.Fatalf("Default expectation is already set for the StocksService.ReserveRemove method")
	}

	if len(mmReserveRemove.expectations) > 0 {
		mmReserveRemove.mock.t.Fatalf("Some expectations are already set for the StocksService.ReserveRemove method")
	}

	mmReserveRemove.mock.funcReserveRemove = f
	return mmReserveRemove.mock
}

// When sets expectation for the StocksService.ReserveRemove which will trigger the result defined by the following
// Then helper
func (mmReserveRemove *mStocksServiceMockReserveRemove) When(ctx context.Context, items []*orderModel.Item) *StocksServiceMockReserveRemoveExpectation {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StocksServiceMock.ReserveRemove mock is already set by Set")
	}

	expectation := &StocksServiceMockReserveRemoveExpectation{
		mock:   mmReserveRemove.mock,
		params: &StocksServiceMockReserveRemoveParams{ctx, items},
	}
	mmReserveRemove.expectations = append(mmReserveRemove.expectations, expectation)
	return expectation
}

// Then sets up StocksService.ReserveRemove return parameters for the expectation previously defined by the When method
func (e *StocksServiceMockReserveRemoveExpectation) Then(err error) *StocksServiceMock {
	e.results = &StocksServiceMockReserveRemoveResults{err}
	return e.mock
}

// Times sets number of times StocksService.ReserveRemove should be invoked
func (mmReserveRemove *mStocksServiceMockReserveRemove) Times(n uint64) *mStocksServiceMockReserveRemove {
	if n == 0 {
		mmReserveRemove.mock.t.Fatalf("Times of StocksServiceMock.ReserveRemove mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserveRemove.expectedInvocations, n)
	return mmReserveRemove
}

func (mmReserveRemove *mStocksServiceMockReserveRemove) invocationsDone() bool {
	if len(mmReserveRemove.expectations) == 0 && mmReserveRemove.defaultExpectation == nil && mmReserveRemove.mock.funcReserveRemove == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserveRemove.mock.afterReserveRemoveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserveRemove.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ReserveRemove implements handler.StocksService
func (mmReserveRemove *StocksServiceMock) ReserveRemove(ctx context.Context, items []*orderModel.Item) (err error) {
	mm_atomic.AddUint64(&mmReserveRemove.beforeReserveRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmReserveRemove.afterReserveRemoveCounter, 1)

	if mmReserveRemove.inspectFuncReserveRemove != nil {
		mmReserveRemove.inspectFuncReserveRemove(ctx, items)
	}

	mm_params := StocksServiceMockReserveRemoveParams{ctx, items}

	// Record call args
	mmReserveRemove.ReserveRemoveMock.mutex.Lock()
	mmReserveRemove.ReserveRemoveMock.callArgs = append(mmReserveRemove.ReserveRemoveMock.callArgs, &mm_params)
	mmReserveRemove.ReserveRemoveMock.mutex.Unlock()

	for _, e := range mmReserveRemove.ReserveRemoveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserveRemove.ReserveRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserveRemove.ReserveRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmReserveRemove.ReserveRemoveMock.defaultExpectation.params
		mm_want_ptrs := mmReserveRemove.ReserveRemoveMock.defaultExpectation.paramPtrs

		mm_got := StocksServiceMockReserveRemoveParams{ctx, items}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserveRemove.t.Errorf("StocksServiceMock.ReserveRemove got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.items != nil && !minimock.Equal(*mm_want_ptrs.items, mm_got.items) {
				mmReserveRemove.t.Errorf("StocksServiceMock.ReserveRemove got unexpected parameter items, want: %#v, got: %#v%s\n", *mm_want_ptrs.items, mm_got.items, minimock.Diff(*mm_want_ptrs.items, mm_got.items))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserveRemove.t.Errorf("StocksServiceMock.ReserveRemove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserveRemove.ReserveRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmReserveRemove.t.Fatal("No results are set for the StocksServiceMock.ReserveRemove")
		}
		return (*mm_results).err
	}
	if mmReserveRemove.funcReserveRemove != nil {
		return mmReserveRemove.funcReserveRemove(ctx, items)
	}
	mmReserveRemove.t.Fatalf("Unexpected call to StocksServiceMock.ReserveRemove. %v %v", ctx, items)
	return
}

// ReserveRemoveAfterCounter returns a count of finished StocksServiceMock.ReserveRemove invocations
func (mmReserveRemove *StocksServiceMock) ReserveRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveRemove.afterReserveRemoveCounter)
}

// ReserveRemoveBeforeCounter returns a count of StocksServiceMock.ReserveRemove invocations
func (mmReserveRemove *StocksServiceMock) ReserveRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveRemove.beforeReserveRemoveCounter)
}

// Calls returns a list of arguments used in each call to StocksServiceMock.ReserveRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserveRemove *mStocksServiceMockReserveRemove) Calls() []*StocksServiceMockReserveRemoveParams {
	mmReserveRemove.mutex.RLock()

	argCopy := make([]*StocksServiceMockReserveRemoveParams, len(mmReserveRemove.callArgs))
	copy(argCopy, mmReserveRemove.callArgs)

	mmReserveRemove.mutex.RUnlock()

	return argCopy
}

// MinimockReserveRemoveDone returns true if the count of the ReserveRemove invocations corresponds
// the number of defined expectations
func (m *StocksServiceMock) MinimockReserveRemoveDone() bool {
	if m.ReserveRemoveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveRemoveMock.invocationsDone()
}

// MinimockReserveRemoveInspect logs each unmet expectation
func (m *StocksServiceMock) MinimockReserveRemoveInspect() {
	for _, e := range m.ReserveRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StocksServiceMock.ReserveRemove with params: %#v", *e.params)
		}
	}

	afterReserveRemoveCounter := mm_atomic.LoadUint64(&m.afterReserveRemoveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveRemoveMock.defaultExpectation != nil && afterReserveRemoveCounter < 1 {
		if m.ReserveRemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StocksServiceMock.ReserveRemove")
		} else {
			m.t.Errorf("Expected call to StocksServiceMock.ReserveRemove with params: %#v", *m.ReserveRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserveRemove != nil && afterReserveRemoveCounter < 1 {
		m.t.Error("Expected call to StocksServiceMock.ReserveRemove")
	}

	if !m.ReserveRemoveMock.invocationsDone() && afterReserveRemoveCounter > 0 {
		m.t.Errorf("Expected %d calls to StocksServiceMock.ReserveRemove but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveRemoveMock.expectedInvocations), afterReserveRemoveCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StocksServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetBySKUInspect()

			m.MinimockReserveInspect()

			m.MinimockReserveCancelInspect()

			m.MinimockReserveRemoveInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StocksServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StocksServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetBySKUDone() &&
		m.MinimockReserveDone() &&
		m.MinimockReserveCancelDone() &&
		m.MinimockReserveRemoveDone()
}
