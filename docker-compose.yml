version: "3.8"

services:
  cart:
    container_name: cart
    build:
      context: ./cart
      dockerfile: ./Dockerfile
    ports:
      - "8082:8082" # HTTP
    depends_on:
      loms:
        condition: service_started
      redis:
        condition: service_started

  loms:
    container_name: loms
    build:
      context: ./loms
      dockerfile: ./Dockerfile
    ports:
      - "8081:8081" # GRPC
      - "8080:8080" # HTTP
    depends_on:
      postgres-1:
        condition: service_healthy
      postgres-2:
        condition: service_healthy
      goose-1:
        condition: service_completed_successfully
      goose-2:
        condition: service_completed_successfully
      kafka:
        condition: service_started
      notifier:
        condition: service_started

  postgres-1:
    container_name: postgres-1
    image: postgres:latest
    restart: always
    ports:
      - "54321:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s
      timeout: 5s
      retries: 10

  postgres-2:
    container_name: postgres-2
    image: postgres:latest
    restart: always
    ports:
      - "54322:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s
      timeout: 5s
      retries: 10

  goose-1:
    container_name: goose-1
    image: golang:1.22
    depends_on:
      postgres-1:
        condition: service_healthy
    environment:
      - GOOSE_DRIVER=postgres
      - GOOSE_DBSTRING=postgres://postgres:postgres@postgres-1:5432/postgres
    volumes:
      - ./loms/migrations:/migrations
    command: "sh -c 'go install github.com/pressly/goose/v3/cmd/goose@latest && goose -dir /migrations up'"

  goose-2:
    container_name: goose-2
    image: golang:1.22
    depends_on:
      postgres-2:
        condition: service_healthy
    environment:
      - GOOSE_DRIVER=postgres
      - GOOSE_DBSTRING=postgres://postgres:postgres@postgres-2:5432/postgres
    volumes:
      - ./loms/migrations:/migrations
    command: "sh -c 'go install github.com/pressly/goose/v3/cmd/goose@latest && goose -dir /migrations up'"

  prometheus:
    container_name: prometheus
    image: bitnami/prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning/
      - ./grafana/dashboard:/etc/grafana/dashboard/
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"

  jaeger:
    container_name: jaeger
    image: bitnami/jaeger:latest
    ports:
      - "16686:16686"
  
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8083:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: "true"
  
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

  kafka-init-topics:
    container_name: kafka-init-topics
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
        cub kafka-ready -b kafka:29092 1 30 && \
        kafka-topics --create --topic loms.order-events --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092'"

  notifier:
    container_name: notifier
    build:
      context: ./notifier
      dockerfile: ./Dockerfile
    depends_on:
      kafka-init-topics:
        condition: service_completed_successfully
        
  redis:
    container_name: redis
    image: redis:alpine
    ports:
      - "6379:6379"

volumes:
  prometheus_data: {}
  grafana_data: {}
