// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package mock

//go:generate minimock -i route256/cart/internal/loms/client.OrderService -o loms_order_service_mock.go -n OrderServiceMock -p mock

import (
	"context"
	loms "route256/cart/pb/api"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderServiceMock implements client.OrderService
type OrderServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcOrderCancel          func(ctx context.Context, req *loms.OrderCancelRequest) (op1 *loms.OrderCancelResponse, err error)
	inspectFuncOrderCancel   func(ctx context.Context, req *loms.OrderCancelRequest)
	afterOrderCancelCounter  uint64
	beforeOrderCancelCounter uint64
	OrderCancelMock          mOrderServiceMockOrderCancel

	funcOrderCreate          func(ctx context.Context, req *loms.OrderCreateRequest) (op1 *loms.OrderCreateResponse, err error)
	inspectFuncOrderCreate   func(ctx context.Context, req *loms.OrderCreateRequest)
	afterOrderCreateCounter  uint64
	beforeOrderCreateCounter uint64
	OrderCreateMock          mOrderServiceMockOrderCreate

	funcOrderInfo          func(ctx context.Context, req *loms.OrderInfoRequest) (op1 *loms.OrderInfoResponse, err error)
	inspectFuncOrderInfo   func(ctx context.Context, req *loms.OrderInfoRequest)
	afterOrderInfoCounter  uint64
	beforeOrderInfoCounter uint64
	OrderInfoMock          mOrderServiceMockOrderInfo

	funcOrderPay          func(ctx context.Context, req *loms.OrderPayRequest) (op1 *loms.OrderPayResponse, err error)
	inspectFuncOrderPay   func(ctx context.Context, req *loms.OrderPayRequest)
	afterOrderPayCounter  uint64
	beforeOrderPayCounter uint64
	OrderPayMock          mOrderServiceMockOrderPay
}

// NewOrderServiceMock returns a mock for client.OrderService
func NewOrderServiceMock(t minimock.Tester) *OrderServiceMock {
	m := &OrderServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.OrderCancelMock = mOrderServiceMockOrderCancel{mock: m}
	m.OrderCancelMock.callArgs = []*OrderServiceMockOrderCancelParams{}

	m.OrderCreateMock = mOrderServiceMockOrderCreate{mock: m}
	m.OrderCreateMock.callArgs = []*OrderServiceMockOrderCreateParams{}

	m.OrderInfoMock = mOrderServiceMockOrderInfo{mock: m}
	m.OrderInfoMock.callArgs = []*OrderServiceMockOrderInfoParams{}

	m.OrderPayMock = mOrderServiceMockOrderPay{mock: m}
	m.OrderPayMock.callArgs = []*OrderServiceMockOrderPayParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrderServiceMockOrderCancel struct {
	optional           bool
	mock               *OrderServiceMock
	defaultExpectation *OrderServiceMockOrderCancelExpectation
	expectations       []*OrderServiceMockOrderCancelExpectation

	callArgs []*OrderServiceMockOrderCancelParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// OrderServiceMockOrderCancelExpectation specifies expectation struct of the OrderService.OrderCancel
type OrderServiceMockOrderCancelExpectation struct {
	mock      *OrderServiceMock
	params    *OrderServiceMockOrderCancelParams
	paramPtrs *OrderServiceMockOrderCancelParamPtrs
	results   *OrderServiceMockOrderCancelResults
	Counter   uint64
}

// OrderServiceMockOrderCancelParams contains parameters of the OrderService.OrderCancel
type OrderServiceMockOrderCancelParams struct {
	ctx context.Context
	req *loms.OrderCancelRequest
}

// OrderServiceMockOrderCancelParamPtrs contains pointers to parameters of the OrderService.OrderCancel
type OrderServiceMockOrderCancelParamPtrs struct {
	ctx *context.Context
	req **loms.OrderCancelRequest
}

// OrderServiceMockOrderCancelResults contains results of the OrderService.OrderCancel
type OrderServiceMockOrderCancelResults struct {
	op1 *loms.OrderCancelResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderCancel *mOrderServiceMockOrderCancel) Optional() *mOrderServiceMockOrderCancel {
	mmOrderCancel.optional = true
	return mmOrderCancel
}

// Expect sets up expected params for OrderService.OrderCancel
func (mmOrderCancel *mOrderServiceMockOrderCancel) Expect(ctx context.Context, req *loms.OrderCancelRequest) *mOrderServiceMockOrderCancel {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceMock.OrderCancel mock is already set by Set")
	}

	if mmOrderCancel.defaultExpectation == nil {
		mmOrderCancel.defaultExpectation = &OrderServiceMockOrderCancelExpectation{}
	}

	if mmOrderCancel.defaultExpectation.paramPtrs != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceMock.OrderCancel mock is already set by ExpectParams functions")
	}

	mmOrderCancel.defaultExpectation.params = &OrderServiceMockOrderCancelParams{ctx, req}
	for _, e := range mmOrderCancel.expectations {
		if minimock.Equal(e.params, mmOrderCancel.defaultExpectation.params) {
			mmOrderCancel.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderCancel.defaultExpectation.params)
		}
	}

	return mmOrderCancel
}

// ExpectCtxParam1 sets up expected param ctx for OrderService.OrderCancel
func (mmOrderCancel *mOrderServiceMockOrderCancel) ExpectCtxParam1(ctx context.Context) *mOrderServiceMockOrderCancel {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceMock.OrderCancel mock is already set by Set")
	}

	if mmOrderCancel.defaultExpectation == nil {
		mmOrderCancel.defaultExpectation = &OrderServiceMockOrderCancelExpectation{}
	}

	if mmOrderCancel.defaultExpectation.params != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceMock.OrderCancel mock is already set by Expect")
	}

	if mmOrderCancel.defaultExpectation.paramPtrs == nil {
		mmOrderCancel.defaultExpectation.paramPtrs = &OrderServiceMockOrderCancelParamPtrs{}
	}
	mmOrderCancel.defaultExpectation.paramPtrs.ctx = &ctx

	return mmOrderCancel
}

// ExpectReqParam2 sets up expected param req for OrderService.OrderCancel
func (mmOrderCancel *mOrderServiceMockOrderCancel) ExpectReqParam2(req *loms.OrderCancelRequest) *mOrderServiceMockOrderCancel {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceMock.OrderCancel mock is already set by Set")
	}

	if mmOrderCancel.defaultExpectation == nil {
		mmOrderCancel.defaultExpectation = &OrderServiceMockOrderCancelExpectation{}
	}

	if mmOrderCancel.defaultExpectation.params != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceMock.OrderCancel mock is already set by Expect")
	}

	if mmOrderCancel.defaultExpectation.paramPtrs == nil {
		mmOrderCancel.defaultExpectation.paramPtrs = &OrderServiceMockOrderCancelParamPtrs{}
	}
	mmOrderCancel.defaultExpectation.paramPtrs.req = &req

	return mmOrderCancel
}

// Inspect accepts an inspector function that has same arguments as the OrderService.OrderCancel
func (mmOrderCancel *mOrderServiceMockOrderCancel) Inspect(f func(ctx context.Context, req *loms.OrderCancelRequest)) *mOrderServiceMockOrderCancel {
	if mmOrderCancel.mock.inspectFuncOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("Inspect function is already set for OrderServiceMock.OrderCancel")
	}

	mmOrderCancel.mock.inspectFuncOrderCancel = f

	return mmOrderCancel
}

// Return sets up results that will be returned by OrderService.OrderCancel
func (mmOrderCancel *mOrderServiceMockOrderCancel) Return(op1 *loms.OrderCancelResponse, err error) *OrderServiceMock {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceMock.OrderCancel mock is already set by Set")
	}

	if mmOrderCancel.defaultExpectation == nil {
		mmOrderCancel.defaultExpectation = &OrderServiceMockOrderCancelExpectation{mock: mmOrderCancel.mock}
	}
	mmOrderCancel.defaultExpectation.results = &OrderServiceMockOrderCancelResults{op1, err}
	return mmOrderCancel.mock
}

// Set uses given function f to mock the OrderService.OrderCancel method
func (mmOrderCancel *mOrderServiceMockOrderCancel) Set(f func(ctx context.Context, req *loms.OrderCancelRequest) (op1 *loms.OrderCancelResponse, err error)) *OrderServiceMock {
	if mmOrderCancel.defaultExpectation != nil {
		mmOrderCancel.mock.t.Fatalf("Default expectation is already set for the OrderService.OrderCancel method")
	}

	if len(mmOrderCancel.expectations) > 0 {
		mmOrderCancel.mock.t.Fatalf("Some expectations are already set for the OrderService.OrderCancel method")
	}

	mmOrderCancel.mock.funcOrderCancel = f
	return mmOrderCancel.mock
}

// When sets expectation for the OrderService.OrderCancel which will trigger the result defined by the following
// Then helper
func (mmOrderCancel *mOrderServiceMockOrderCancel) When(ctx context.Context, req *loms.OrderCancelRequest) *OrderServiceMockOrderCancelExpectation {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceMock.OrderCancel mock is already set by Set")
	}

	expectation := &OrderServiceMockOrderCancelExpectation{
		mock:   mmOrderCancel.mock,
		params: &OrderServiceMockOrderCancelParams{ctx, req},
	}
	mmOrderCancel.expectations = append(mmOrderCancel.expectations, expectation)
	return expectation
}

// Then sets up OrderService.OrderCancel return parameters for the expectation previously defined by the When method
func (e *OrderServiceMockOrderCancelExpectation) Then(op1 *loms.OrderCancelResponse, err error) *OrderServiceMock {
	e.results = &OrderServiceMockOrderCancelResults{op1, err}
	return e.mock
}

// Times sets number of times OrderService.OrderCancel should be invoked
func (mmOrderCancel *mOrderServiceMockOrderCancel) Times(n uint64) *mOrderServiceMockOrderCancel {
	if n == 0 {
		mmOrderCancel.mock.t.Fatalf("Times of OrderServiceMock.OrderCancel mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderCancel.expectedInvocations, n)
	return mmOrderCancel
}

func (mmOrderCancel *mOrderServiceMockOrderCancel) invocationsDone() bool {
	if len(mmOrderCancel.expectations) == 0 && mmOrderCancel.defaultExpectation == nil && mmOrderCancel.mock.funcOrderCancel == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderCancel.mock.afterOrderCancelCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderCancel.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderCancel implements client.OrderService
func (mmOrderCancel *OrderServiceMock) OrderCancel(ctx context.Context, req *loms.OrderCancelRequest) (op1 *loms.OrderCancelResponse, err error) {
	mm_atomic.AddUint64(&mmOrderCancel.beforeOrderCancelCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderCancel.afterOrderCancelCounter, 1)

	if mmOrderCancel.inspectFuncOrderCancel != nil {
		mmOrderCancel.inspectFuncOrderCancel(ctx, req)
	}

	mm_params := OrderServiceMockOrderCancelParams{ctx, req}

	// Record call args
	mmOrderCancel.OrderCancelMock.mutex.Lock()
	mmOrderCancel.OrderCancelMock.callArgs = append(mmOrderCancel.OrderCancelMock.callArgs, &mm_params)
	mmOrderCancel.OrderCancelMock.mutex.Unlock()

	for _, e := range mmOrderCancel.OrderCancelMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmOrderCancel.OrderCancelMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderCancel.OrderCancelMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderCancel.OrderCancelMock.defaultExpectation.params
		mm_want_ptrs := mmOrderCancel.OrderCancelMock.defaultExpectation.paramPtrs

		mm_got := OrderServiceMockOrderCancelParams{ctx, req}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderCancel.t.Errorf("OrderServiceMock.OrderCancel got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmOrderCancel.t.Errorf("OrderServiceMock.OrderCancel got unexpected parameter req, want: %#v, got: %#v%s\n", *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderCancel.t.Errorf("OrderServiceMock.OrderCancel got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderCancel.OrderCancelMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderCancel.t.Fatal("No results are set for the OrderServiceMock.OrderCancel")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmOrderCancel.funcOrderCancel != nil {
		return mmOrderCancel.funcOrderCancel(ctx, req)
	}
	mmOrderCancel.t.Fatalf("Unexpected call to OrderServiceMock.OrderCancel. %v %v", ctx, req)
	return
}

// OrderCancelAfterCounter returns a count of finished OrderServiceMock.OrderCancel invocations
func (mmOrderCancel *OrderServiceMock) OrderCancelAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCancel.afterOrderCancelCounter)
}

// OrderCancelBeforeCounter returns a count of OrderServiceMock.OrderCancel invocations
func (mmOrderCancel *OrderServiceMock) OrderCancelBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCancel.beforeOrderCancelCounter)
}

// Calls returns a list of arguments used in each call to OrderServiceMock.OrderCancel.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderCancel *mOrderServiceMockOrderCancel) Calls() []*OrderServiceMockOrderCancelParams {
	mmOrderCancel.mutex.RLock()

	argCopy := make([]*OrderServiceMockOrderCancelParams, len(mmOrderCancel.callArgs))
	copy(argCopy, mmOrderCancel.callArgs)

	mmOrderCancel.mutex.RUnlock()

	return argCopy
}

// MinimockOrderCancelDone returns true if the count of the OrderCancel invocations corresponds
// the number of defined expectations
func (m *OrderServiceMock) MinimockOrderCancelDone() bool {
	if m.OrderCancelMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderCancelMock.invocationsDone()
}

// MinimockOrderCancelInspect logs each unmet expectation
func (m *OrderServiceMock) MinimockOrderCancelInspect() {
	for _, e := range m.OrderCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderServiceMock.OrderCancel with params: %#v", *e.params)
		}
	}

	afterOrderCancelCounter := mm_atomic.LoadUint64(&m.afterOrderCancelCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderCancelMock.defaultExpectation != nil && afterOrderCancelCounter < 1 {
		if m.OrderCancelMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderServiceMock.OrderCancel")
		} else {
			m.t.Errorf("Expected call to OrderServiceMock.OrderCancel with params: %#v", *m.OrderCancelMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderCancel != nil && afterOrderCancelCounter < 1 {
		m.t.Error("Expected call to OrderServiceMock.OrderCancel")
	}

	if !m.OrderCancelMock.invocationsDone() && afterOrderCancelCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderServiceMock.OrderCancel but found %d calls",
			mm_atomic.LoadUint64(&m.OrderCancelMock.expectedInvocations), afterOrderCancelCounter)
	}
}

type mOrderServiceMockOrderCreate struct {
	optional           bool
	mock               *OrderServiceMock
	defaultExpectation *OrderServiceMockOrderCreateExpectation
	expectations       []*OrderServiceMockOrderCreateExpectation

	callArgs []*OrderServiceMockOrderCreateParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// OrderServiceMockOrderCreateExpectation specifies expectation struct of the OrderService.OrderCreate
type OrderServiceMockOrderCreateExpectation struct {
	mock      *OrderServiceMock
	params    *OrderServiceMockOrderCreateParams
	paramPtrs *OrderServiceMockOrderCreateParamPtrs
	results   *OrderServiceMockOrderCreateResults
	Counter   uint64
}

// OrderServiceMockOrderCreateParams contains parameters of the OrderService.OrderCreate
type OrderServiceMockOrderCreateParams struct {
	ctx context.Context
	req *loms.OrderCreateRequest
}

// OrderServiceMockOrderCreateParamPtrs contains pointers to parameters of the OrderService.OrderCreate
type OrderServiceMockOrderCreateParamPtrs struct {
	ctx *context.Context
	req **loms.OrderCreateRequest
}

// OrderServiceMockOrderCreateResults contains results of the OrderService.OrderCreate
type OrderServiceMockOrderCreateResults struct {
	op1 *loms.OrderCreateResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderCreate *mOrderServiceMockOrderCreate) Optional() *mOrderServiceMockOrderCreate {
	mmOrderCreate.optional = true
	return mmOrderCreate
}

// Expect sets up expected params for OrderService.OrderCreate
func (mmOrderCreate *mOrderServiceMockOrderCreate) Expect(ctx context.Context, req *loms.OrderCreateRequest) *mOrderServiceMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &OrderServiceMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.paramPtrs != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceMock.OrderCreate mock is already set by ExpectParams functions")
	}

	mmOrderCreate.defaultExpectation.params = &OrderServiceMockOrderCreateParams{ctx, req}
	for _, e := range mmOrderCreate.expectations {
		if minimock.Equal(e.params, mmOrderCreate.defaultExpectation.params) {
			mmOrderCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderCreate.defaultExpectation.params)
		}
	}

	return mmOrderCreate
}

// ExpectCtxParam1 sets up expected param ctx for OrderService.OrderCreate
func (mmOrderCreate *mOrderServiceMockOrderCreate) ExpectCtxParam1(ctx context.Context) *mOrderServiceMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &OrderServiceMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.params != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceMock.OrderCreate mock is already set by Expect")
	}

	if mmOrderCreate.defaultExpectation.paramPtrs == nil {
		mmOrderCreate.defaultExpectation.paramPtrs = &OrderServiceMockOrderCreateParamPtrs{}
	}
	mmOrderCreate.defaultExpectation.paramPtrs.ctx = &ctx

	return mmOrderCreate
}

// ExpectReqParam2 sets up expected param req for OrderService.OrderCreate
func (mmOrderCreate *mOrderServiceMockOrderCreate) ExpectReqParam2(req *loms.OrderCreateRequest) *mOrderServiceMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &OrderServiceMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.params != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceMock.OrderCreate mock is already set by Expect")
	}

	if mmOrderCreate.defaultExpectation.paramPtrs == nil {
		mmOrderCreate.defaultExpectation.paramPtrs = &OrderServiceMockOrderCreateParamPtrs{}
	}
	mmOrderCreate.defaultExpectation.paramPtrs.req = &req

	return mmOrderCreate
}

// Inspect accepts an inspector function that has same arguments as the OrderService.OrderCreate
func (mmOrderCreate *mOrderServiceMockOrderCreate) Inspect(f func(ctx context.Context, req *loms.OrderCreateRequest)) *mOrderServiceMockOrderCreate {
	if mmOrderCreate.mock.inspectFuncOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("Inspect function is already set for OrderServiceMock.OrderCreate")
	}

	mmOrderCreate.mock.inspectFuncOrderCreate = f

	return mmOrderCreate
}

// Return sets up results that will be returned by OrderService.OrderCreate
func (mmOrderCreate *mOrderServiceMockOrderCreate) Return(op1 *loms.OrderCreateResponse, err error) *OrderServiceMock {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &OrderServiceMockOrderCreateExpectation{mock: mmOrderCreate.mock}
	}
	mmOrderCreate.defaultExpectation.results = &OrderServiceMockOrderCreateResults{op1, err}
	return mmOrderCreate.mock
}

// Set uses given function f to mock the OrderService.OrderCreate method
func (mmOrderCreate *mOrderServiceMockOrderCreate) Set(f func(ctx context.Context, req *loms.OrderCreateRequest) (op1 *loms.OrderCreateResponse, err error)) *OrderServiceMock {
	if mmOrderCreate.defaultExpectation != nil {
		mmOrderCreate.mock.t.Fatalf("Default expectation is already set for the OrderService.OrderCreate method")
	}

	if len(mmOrderCreate.expectations) > 0 {
		mmOrderCreate.mock.t.Fatalf("Some expectations are already set for the OrderService.OrderCreate method")
	}

	mmOrderCreate.mock.funcOrderCreate = f
	return mmOrderCreate.mock
}

// When sets expectation for the OrderService.OrderCreate which will trigger the result defined by the following
// Then helper
func (mmOrderCreate *mOrderServiceMockOrderCreate) When(ctx context.Context, req *loms.OrderCreateRequest) *OrderServiceMockOrderCreateExpectation {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceMock.OrderCreate mock is already set by Set")
	}

	expectation := &OrderServiceMockOrderCreateExpectation{
		mock:   mmOrderCreate.mock,
		params: &OrderServiceMockOrderCreateParams{ctx, req},
	}
	mmOrderCreate.expectations = append(mmOrderCreate.expectations, expectation)
	return expectation
}

// Then sets up OrderService.OrderCreate return parameters for the expectation previously defined by the When method
func (e *OrderServiceMockOrderCreateExpectation) Then(op1 *loms.OrderCreateResponse, err error) *OrderServiceMock {
	e.results = &OrderServiceMockOrderCreateResults{op1, err}
	return e.mock
}

// Times sets number of times OrderService.OrderCreate should be invoked
func (mmOrderCreate *mOrderServiceMockOrderCreate) Times(n uint64) *mOrderServiceMockOrderCreate {
	if n == 0 {
		mmOrderCreate.mock.t.Fatalf("Times of OrderServiceMock.OrderCreate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderCreate.expectedInvocations, n)
	return mmOrderCreate
}

func (mmOrderCreate *mOrderServiceMockOrderCreate) invocationsDone() bool {
	if len(mmOrderCreate.expectations) == 0 && mmOrderCreate.defaultExpectation == nil && mmOrderCreate.mock.funcOrderCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderCreate.mock.afterOrderCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderCreate implements client.OrderService
func (mmOrderCreate *OrderServiceMock) OrderCreate(ctx context.Context, req *loms.OrderCreateRequest) (op1 *loms.OrderCreateResponse, err error) {
	mm_atomic.AddUint64(&mmOrderCreate.beforeOrderCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderCreate.afterOrderCreateCounter, 1)

	if mmOrderCreate.inspectFuncOrderCreate != nil {
		mmOrderCreate.inspectFuncOrderCreate(ctx, req)
	}

	mm_params := OrderServiceMockOrderCreateParams{ctx, req}

	// Record call args
	mmOrderCreate.OrderCreateMock.mutex.Lock()
	mmOrderCreate.OrderCreateMock.callArgs = append(mmOrderCreate.OrderCreateMock.callArgs, &mm_params)
	mmOrderCreate.OrderCreateMock.mutex.Unlock()

	for _, e := range mmOrderCreate.OrderCreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmOrderCreate.OrderCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderCreate.OrderCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderCreate.OrderCreateMock.defaultExpectation.params
		mm_want_ptrs := mmOrderCreate.OrderCreateMock.defaultExpectation.paramPtrs

		mm_got := OrderServiceMockOrderCreateParams{ctx, req}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderCreate.t.Errorf("OrderServiceMock.OrderCreate got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmOrderCreate.t.Errorf("OrderServiceMock.OrderCreate got unexpected parameter req, want: %#v, got: %#v%s\n", *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderCreate.t.Errorf("OrderServiceMock.OrderCreate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderCreate.OrderCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderCreate.t.Fatal("No results are set for the OrderServiceMock.OrderCreate")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmOrderCreate.funcOrderCreate != nil {
		return mmOrderCreate.funcOrderCreate(ctx, req)
	}
	mmOrderCreate.t.Fatalf("Unexpected call to OrderServiceMock.OrderCreate. %v %v", ctx, req)
	return
}

// OrderCreateAfterCounter returns a count of finished OrderServiceMock.OrderCreate invocations
func (mmOrderCreate *OrderServiceMock) OrderCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCreate.afterOrderCreateCounter)
}

// OrderCreateBeforeCounter returns a count of OrderServiceMock.OrderCreate invocations
func (mmOrderCreate *OrderServiceMock) OrderCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCreate.beforeOrderCreateCounter)
}

// Calls returns a list of arguments used in each call to OrderServiceMock.OrderCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderCreate *mOrderServiceMockOrderCreate) Calls() []*OrderServiceMockOrderCreateParams {
	mmOrderCreate.mutex.RLock()

	argCopy := make([]*OrderServiceMockOrderCreateParams, len(mmOrderCreate.callArgs))
	copy(argCopy, mmOrderCreate.callArgs)

	mmOrderCreate.mutex.RUnlock()

	return argCopy
}

// MinimockOrderCreateDone returns true if the count of the OrderCreate invocations corresponds
// the number of defined expectations
func (m *OrderServiceMock) MinimockOrderCreateDone() bool {
	if m.OrderCreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderCreateMock.invocationsDone()
}

// MinimockOrderCreateInspect logs each unmet expectation
func (m *OrderServiceMock) MinimockOrderCreateInspect() {
	for _, e := range m.OrderCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderServiceMock.OrderCreate with params: %#v", *e.params)
		}
	}

	afterOrderCreateCounter := mm_atomic.LoadUint64(&m.afterOrderCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderCreateMock.defaultExpectation != nil && afterOrderCreateCounter < 1 {
		if m.OrderCreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderServiceMock.OrderCreate")
		} else {
			m.t.Errorf("Expected call to OrderServiceMock.OrderCreate with params: %#v", *m.OrderCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderCreate != nil && afterOrderCreateCounter < 1 {
		m.t.Error("Expected call to OrderServiceMock.OrderCreate")
	}

	if !m.OrderCreateMock.invocationsDone() && afterOrderCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderServiceMock.OrderCreate but found %d calls",
			mm_atomic.LoadUint64(&m.OrderCreateMock.expectedInvocations), afterOrderCreateCounter)
	}
}

type mOrderServiceMockOrderInfo struct {
	optional           bool
	mock               *OrderServiceMock
	defaultExpectation *OrderServiceMockOrderInfoExpectation
	expectations       []*OrderServiceMockOrderInfoExpectation

	callArgs []*OrderServiceMockOrderInfoParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// OrderServiceMockOrderInfoExpectation specifies expectation struct of the OrderService.OrderInfo
type OrderServiceMockOrderInfoExpectation struct {
	mock      *OrderServiceMock
	params    *OrderServiceMockOrderInfoParams
	paramPtrs *OrderServiceMockOrderInfoParamPtrs
	results   *OrderServiceMockOrderInfoResults
	Counter   uint64
}

// OrderServiceMockOrderInfoParams contains parameters of the OrderService.OrderInfo
type OrderServiceMockOrderInfoParams struct {
	ctx context.Context
	req *loms.OrderInfoRequest
}

// OrderServiceMockOrderInfoParamPtrs contains pointers to parameters of the OrderService.OrderInfo
type OrderServiceMockOrderInfoParamPtrs struct {
	ctx *context.Context
	req **loms.OrderInfoRequest
}

// OrderServiceMockOrderInfoResults contains results of the OrderService.OrderInfo
type OrderServiceMockOrderInfoResults struct {
	op1 *loms.OrderInfoResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderInfo *mOrderServiceMockOrderInfo) Optional() *mOrderServiceMockOrderInfo {
	mmOrderInfo.optional = true
	return mmOrderInfo
}

// Expect sets up expected params for OrderService.OrderInfo
func (mmOrderInfo *mOrderServiceMockOrderInfo) Expect(ctx context.Context, req *loms.OrderInfoRequest) *mOrderServiceMockOrderInfo {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceMock.OrderInfo mock is already set by Set")
	}

	if mmOrderInfo.defaultExpectation == nil {
		mmOrderInfo.defaultExpectation = &OrderServiceMockOrderInfoExpectation{}
	}

	if mmOrderInfo.defaultExpectation.paramPtrs != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceMock.OrderInfo mock is already set by ExpectParams functions")
	}

	mmOrderInfo.defaultExpectation.params = &OrderServiceMockOrderInfoParams{ctx, req}
	for _, e := range mmOrderInfo.expectations {
		if minimock.Equal(e.params, mmOrderInfo.defaultExpectation.params) {
			mmOrderInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderInfo.defaultExpectation.params)
		}
	}

	return mmOrderInfo
}

// ExpectCtxParam1 sets up expected param ctx for OrderService.OrderInfo
func (mmOrderInfo *mOrderServiceMockOrderInfo) ExpectCtxParam1(ctx context.Context) *mOrderServiceMockOrderInfo {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceMock.OrderInfo mock is already set by Set")
	}

	if mmOrderInfo.defaultExpectation == nil {
		mmOrderInfo.defaultExpectation = &OrderServiceMockOrderInfoExpectation{}
	}

	if mmOrderInfo.defaultExpectation.params != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceMock.OrderInfo mock is already set by Expect")
	}

	if mmOrderInfo.defaultExpectation.paramPtrs == nil {
		mmOrderInfo.defaultExpectation.paramPtrs = &OrderServiceMockOrderInfoParamPtrs{}
	}
	mmOrderInfo.defaultExpectation.paramPtrs.ctx = &ctx

	return mmOrderInfo
}

// ExpectReqParam2 sets up expected param req for OrderService.OrderInfo
func (mmOrderInfo *mOrderServiceMockOrderInfo) ExpectReqParam2(req *loms.OrderInfoRequest) *mOrderServiceMockOrderInfo {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceMock.OrderInfo mock is already set by Set")
	}

	if mmOrderInfo.defaultExpectation == nil {
		mmOrderInfo.defaultExpectation = &OrderServiceMockOrderInfoExpectation{}
	}

	if mmOrderInfo.defaultExpectation.params != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceMock.OrderInfo mock is already set by Expect")
	}

	if mmOrderInfo.defaultExpectation.paramPtrs == nil {
		mmOrderInfo.defaultExpectation.paramPtrs = &OrderServiceMockOrderInfoParamPtrs{}
	}
	mmOrderInfo.defaultExpectation.paramPtrs.req = &req

	return mmOrderInfo
}

// Inspect accepts an inspector function that has same arguments as the OrderService.OrderInfo
func (mmOrderInfo *mOrderServiceMockOrderInfo) Inspect(f func(ctx context.Context, req *loms.OrderInfoRequest)) *mOrderServiceMockOrderInfo {
	if mmOrderInfo.mock.inspectFuncOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("Inspect function is already set for OrderServiceMock.OrderInfo")
	}

	mmOrderInfo.mock.inspectFuncOrderInfo = f

	return mmOrderInfo
}

// Return sets up results that will be returned by OrderService.OrderInfo
func (mmOrderInfo *mOrderServiceMockOrderInfo) Return(op1 *loms.OrderInfoResponse, err error) *OrderServiceMock {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceMock.OrderInfo mock is already set by Set")
	}

	if mmOrderInfo.defaultExpectation == nil {
		mmOrderInfo.defaultExpectation = &OrderServiceMockOrderInfoExpectation{mock: mmOrderInfo.mock}
	}
	mmOrderInfo.defaultExpectation.results = &OrderServiceMockOrderInfoResults{op1, err}
	return mmOrderInfo.mock
}

// Set uses given function f to mock the OrderService.OrderInfo method
func (mmOrderInfo *mOrderServiceMockOrderInfo) Set(f func(ctx context.Context, req *loms.OrderInfoRequest) (op1 *loms.OrderInfoResponse, err error)) *OrderServiceMock {
	if mmOrderInfo.defaultExpectation != nil {
		mmOrderInfo.mock.t.Fatalf("Default expectation is already set for the OrderService.OrderInfo method")
	}

	if len(mmOrderInfo.expectations) > 0 {
		mmOrderInfo.mock.t.Fatalf("Some expectations are already set for the OrderService.OrderInfo method")
	}

	mmOrderInfo.mock.funcOrderInfo = f
	return mmOrderInfo.mock
}

// When sets expectation for the OrderService.OrderInfo which will trigger the result defined by the following
// Then helper
func (mmOrderInfo *mOrderServiceMockOrderInfo) When(ctx context.Context, req *loms.OrderInfoRequest) *OrderServiceMockOrderInfoExpectation {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceMock.OrderInfo mock is already set by Set")
	}

	expectation := &OrderServiceMockOrderInfoExpectation{
		mock:   mmOrderInfo.mock,
		params: &OrderServiceMockOrderInfoParams{ctx, req},
	}
	mmOrderInfo.expectations = append(mmOrderInfo.expectations, expectation)
	return expectation
}

// Then sets up OrderService.OrderInfo return parameters for the expectation previously defined by the When method
func (e *OrderServiceMockOrderInfoExpectation) Then(op1 *loms.OrderInfoResponse, err error) *OrderServiceMock {
	e.results = &OrderServiceMockOrderInfoResults{op1, err}
	return e.mock
}

// Times sets number of times OrderService.OrderInfo should be invoked
func (mmOrderInfo *mOrderServiceMockOrderInfo) Times(n uint64) *mOrderServiceMockOrderInfo {
	if n == 0 {
		mmOrderInfo.mock.t.Fatalf("Times of OrderServiceMock.OrderInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderInfo.expectedInvocations, n)
	return mmOrderInfo
}

func (mmOrderInfo *mOrderServiceMockOrderInfo) invocationsDone() bool {
	if len(mmOrderInfo.expectations) == 0 && mmOrderInfo.defaultExpectation == nil && mmOrderInfo.mock.funcOrderInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderInfo.mock.afterOrderInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderInfo implements client.OrderService
func (mmOrderInfo *OrderServiceMock) OrderInfo(ctx context.Context, req *loms.OrderInfoRequest) (op1 *loms.OrderInfoResponse, err error) {
	mm_atomic.AddUint64(&mmOrderInfo.beforeOrderInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderInfo.afterOrderInfoCounter, 1)

	if mmOrderInfo.inspectFuncOrderInfo != nil {
		mmOrderInfo.inspectFuncOrderInfo(ctx, req)
	}

	mm_params := OrderServiceMockOrderInfoParams{ctx, req}

	// Record call args
	mmOrderInfo.OrderInfoMock.mutex.Lock()
	mmOrderInfo.OrderInfoMock.callArgs = append(mmOrderInfo.OrderInfoMock.callArgs, &mm_params)
	mmOrderInfo.OrderInfoMock.mutex.Unlock()

	for _, e := range mmOrderInfo.OrderInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmOrderInfo.OrderInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderInfo.OrderInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderInfo.OrderInfoMock.defaultExpectation.params
		mm_want_ptrs := mmOrderInfo.OrderInfoMock.defaultExpectation.paramPtrs

		mm_got := OrderServiceMockOrderInfoParams{ctx, req}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderInfo.t.Errorf("OrderServiceMock.OrderInfo got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmOrderInfo.t.Errorf("OrderServiceMock.OrderInfo got unexpected parameter req, want: %#v, got: %#v%s\n", *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderInfo.t.Errorf("OrderServiceMock.OrderInfo got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderInfo.OrderInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderInfo.t.Fatal("No results are set for the OrderServiceMock.OrderInfo")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmOrderInfo.funcOrderInfo != nil {
		return mmOrderInfo.funcOrderInfo(ctx, req)
	}
	mmOrderInfo.t.Fatalf("Unexpected call to OrderServiceMock.OrderInfo. %v %v", ctx, req)
	return
}

// OrderInfoAfterCounter returns a count of finished OrderServiceMock.OrderInfo invocations
func (mmOrderInfo *OrderServiceMock) OrderInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderInfo.afterOrderInfoCounter)
}

// OrderInfoBeforeCounter returns a count of OrderServiceMock.OrderInfo invocations
func (mmOrderInfo *OrderServiceMock) OrderInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderInfo.beforeOrderInfoCounter)
}

// Calls returns a list of arguments used in each call to OrderServiceMock.OrderInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderInfo *mOrderServiceMockOrderInfo) Calls() []*OrderServiceMockOrderInfoParams {
	mmOrderInfo.mutex.RLock()

	argCopy := make([]*OrderServiceMockOrderInfoParams, len(mmOrderInfo.callArgs))
	copy(argCopy, mmOrderInfo.callArgs)

	mmOrderInfo.mutex.RUnlock()

	return argCopy
}

// MinimockOrderInfoDone returns true if the count of the OrderInfo invocations corresponds
// the number of defined expectations
func (m *OrderServiceMock) MinimockOrderInfoDone() bool {
	if m.OrderInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderInfoMock.invocationsDone()
}

// MinimockOrderInfoInspect logs each unmet expectation
func (m *OrderServiceMock) MinimockOrderInfoInspect() {
	for _, e := range m.OrderInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderServiceMock.OrderInfo with params: %#v", *e.params)
		}
	}

	afterOrderInfoCounter := mm_atomic.LoadUint64(&m.afterOrderInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderInfoMock.defaultExpectation != nil && afterOrderInfoCounter < 1 {
		if m.OrderInfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderServiceMock.OrderInfo")
		} else {
			m.t.Errorf("Expected call to OrderServiceMock.OrderInfo with params: %#v", *m.OrderInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderInfo != nil && afterOrderInfoCounter < 1 {
		m.t.Error("Expected call to OrderServiceMock.OrderInfo")
	}

	if !m.OrderInfoMock.invocationsDone() && afterOrderInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderServiceMock.OrderInfo but found %d calls",
			mm_atomic.LoadUint64(&m.OrderInfoMock.expectedInvocations), afterOrderInfoCounter)
	}
}

type mOrderServiceMockOrderPay struct {
	optional           bool
	mock               *OrderServiceMock
	defaultExpectation *OrderServiceMockOrderPayExpectation
	expectations       []*OrderServiceMockOrderPayExpectation

	callArgs []*OrderServiceMockOrderPayParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// OrderServiceMockOrderPayExpectation specifies expectation struct of the OrderService.OrderPay
type OrderServiceMockOrderPayExpectation struct {
	mock      *OrderServiceMock
	params    *OrderServiceMockOrderPayParams
	paramPtrs *OrderServiceMockOrderPayParamPtrs
	results   *OrderServiceMockOrderPayResults
	Counter   uint64
}

// OrderServiceMockOrderPayParams contains parameters of the OrderService.OrderPay
type OrderServiceMockOrderPayParams struct {
	ctx context.Context
	req *loms.OrderPayRequest
}

// OrderServiceMockOrderPayParamPtrs contains pointers to parameters of the OrderService.OrderPay
type OrderServiceMockOrderPayParamPtrs struct {
	ctx *context.Context
	req **loms.OrderPayRequest
}

// OrderServiceMockOrderPayResults contains results of the OrderService.OrderPay
type OrderServiceMockOrderPayResults struct {
	op1 *loms.OrderPayResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderPay *mOrderServiceMockOrderPay) Optional() *mOrderServiceMockOrderPay {
	mmOrderPay.optional = true
	return mmOrderPay
}

// Expect sets up expected params for OrderService.OrderPay
func (mmOrderPay *mOrderServiceMockOrderPay) Expect(ctx context.Context, req *loms.OrderPayRequest) *mOrderServiceMockOrderPay {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceMock.OrderPay mock is already set by Set")
	}

	if mmOrderPay.defaultExpectation == nil {
		mmOrderPay.defaultExpectation = &OrderServiceMockOrderPayExpectation{}
	}

	if mmOrderPay.defaultExpectation.paramPtrs != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceMock.OrderPay mock is already set by ExpectParams functions")
	}

	mmOrderPay.defaultExpectation.params = &OrderServiceMockOrderPayParams{ctx, req}
	for _, e := range mmOrderPay.expectations {
		if minimock.Equal(e.params, mmOrderPay.defaultExpectation.params) {
			mmOrderPay.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderPay.defaultExpectation.params)
		}
	}

	return mmOrderPay
}

// ExpectCtxParam1 sets up expected param ctx for OrderService.OrderPay
func (mmOrderPay *mOrderServiceMockOrderPay) ExpectCtxParam1(ctx context.Context) *mOrderServiceMockOrderPay {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceMock.OrderPay mock is already set by Set")
	}

	if mmOrderPay.defaultExpectation == nil {
		mmOrderPay.defaultExpectation = &OrderServiceMockOrderPayExpectation{}
	}

	if mmOrderPay.defaultExpectation.params != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceMock.OrderPay mock is already set by Expect")
	}

	if mmOrderPay.defaultExpectation.paramPtrs == nil {
		mmOrderPay.defaultExpectation.paramPtrs = &OrderServiceMockOrderPayParamPtrs{}
	}
	mmOrderPay.defaultExpectation.paramPtrs.ctx = &ctx

	return mmOrderPay
}

// ExpectReqParam2 sets up expected param req for OrderService.OrderPay
func (mmOrderPay *mOrderServiceMockOrderPay) ExpectReqParam2(req *loms.OrderPayRequest) *mOrderServiceMockOrderPay {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceMock.OrderPay mock is already set by Set")
	}

	if mmOrderPay.defaultExpectation == nil {
		mmOrderPay.defaultExpectation = &OrderServiceMockOrderPayExpectation{}
	}

	if mmOrderPay.defaultExpectation.params != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceMock.OrderPay mock is already set by Expect")
	}

	if mmOrderPay.defaultExpectation.paramPtrs == nil {
		mmOrderPay.defaultExpectation.paramPtrs = &OrderServiceMockOrderPayParamPtrs{}
	}
	mmOrderPay.defaultExpectation.paramPtrs.req = &req

	return mmOrderPay
}

// Inspect accepts an inspector function that has same arguments as the OrderService.OrderPay
func (mmOrderPay *mOrderServiceMockOrderPay) Inspect(f func(ctx context.Context, req *loms.OrderPayRequest)) *mOrderServiceMockOrderPay {
	if mmOrderPay.mock.inspectFuncOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("Inspect function is already set for OrderServiceMock.OrderPay")
	}

	mmOrderPay.mock.inspectFuncOrderPay = f

	return mmOrderPay
}

// Return sets up results that will be returned by OrderService.OrderPay
func (mmOrderPay *mOrderServiceMockOrderPay) Return(op1 *loms.OrderPayResponse, err error) *OrderServiceMock {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceMock.OrderPay mock is already set by Set")
	}

	if mmOrderPay.defaultExpectation == nil {
		mmOrderPay.defaultExpectation = &OrderServiceMockOrderPayExpectation{mock: mmOrderPay.mock}
	}
	mmOrderPay.defaultExpectation.results = &OrderServiceMockOrderPayResults{op1, err}
	return mmOrderPay.mock
}

// Set uses given function f to mock the OrderService.OrderPay method
func (mmOrderPay *mOrderServiceMockOrderPay) Set(f func(ctx context.Context, req *loms.OrderPayRequest) (op1 *loms.OrderPayResponse, err error)) *OrderServiceMock {
	if mmOrderPay.defaultExpectation != nil {
		mmOrderPay.mock.t.Fatalf("Default expectation is already set for the OrderService.OrderPay method")
	}

	if len(mmOrderPay.expectations) > 0 {
		mmOrderPay.mock.t.Fatalf("Some expectations are already set for the OrderService.OrderPay method")
	}

	mmOrderPay.mock.funcOrderPay = f
	return mmOrderPay.mock
}

// When sets expectation for the OrderService.OrderPay which will trigger the result defined by the following
// Then helper
func (mmOrderPay *mOrderServiceMockOrderPay) When(ctx context.Context, req *loms.OrderPayRequest) *OrderServiceMockOrderPayExpectation {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceMock.OrderPay mock is already set by Set")
	}

	expectation := &OrderServiceMockOrderPayExpectation{
		mock:   mmOrderPay.mock,
		params: &OrderServiceMockOrderPayParams{ctx, req},
	}
	mmOrderPay.expectations = append(mmOrderPay.expectations, expectation)
	return expectation
}

// Then sets up OrderService.OrderPay return parameters for the expectation previously defined by the When method
func (e *OrderServiceMockOrderPayExpectation) Then(op1 *loms.OrderPayResponse, err error) *OrderServiceMock {
	e.results = &OrderServiceMockOrderPayResults{op1, err}
	return e.mock
}

// Times sets number of times OrderService.OrderPay should be invoked
func (mmOrderPay *mOrderServiceMockOrderPay) Times(n uint64) *mOrderServiceMockOrderPay {
	if n == 0 {
		mmOrderPay.mock.t.Fatalf("Times of OrderServiceMock.OrderPay mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderPay.expectedInvocations, n)
	return mmOrderPay
}

func (mmOrderPay *mOrderServiceMockOrderPay) invocationsDone() bool {
	if len(mmOrderPay.expectations) == 0 && mmOrderPay.defaultExpectation == nil && mmOrderPay.mock.funcOrderPay == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderPay.mock.afterOrderPayCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderPay.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderPay implements client.OrderService
func (mmOrderPay *OrderServiceMock) OrderPay(ctx context.Context, req *loms.OrderPayRequest) (op1 *loms.OrderPayResponse, err error) {
	mm_atomic.AddUint64(&mmOrderPay.beforeOrderPayCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderPay.afterOrderPayCounter, 1)

	if mmOrderPay.inspectFuncOrderPay != nil {
		mmOrderPay.inspectFuncOrderPay(ctx, req)
	}

	mm_params := OrderServiceMockOrderPayParams{ctx, req}

	// Record call args
	mmOrderPay.OrderPayMock.mutex.Lock()
	mmOrderPay.OrderPayMock.callArgs = append(mmOrderPay.OrderPayMock.callArgs, &mm_params)
	mmOrderPay.OrderPayMock.mutex.Unlock()

	for _, e := range mmOrderPay.OrderPayMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmOrderPay.OrderPayMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderPay.OrderPayMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderPay.OrderPayMock.defaultExpectation.params
		mm_want_ptrs := mmOrderPay.OrderPayMock.defaultExpectation.paramPtrs

		mm_got := OrderServiceMockOrderPayParams{ctx, req}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderPay.t.Errorf("OrderServiceMock.OrderPay got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmOrderPay.t.Errorf("OrderServiceMock.OrderPay got unexpected parameter req, want: %#v, got: %#v%s\n", *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderPay.t.Errorf("OrderServiceMock.OrderPay got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderPay.OrderPayMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderPay.t.Fatal("No results are set for the OrderServiceMock.OrderPay")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmOrderPay.funcOrderPay != nil {
		return mmOrderPay.funcOrderPay(ctx, req)
	}
	mmOrderPay.t.Fatalf("Unexpected call to OrderServiceMock.OrderPay. %v %v", ctx, req)
	return
}

// OrderPayAfterCounter returns a count of finished OrderServiceMock.OrderPay invocations
func (mmOrderPay *OrderServiceMock) OrderPayAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderPay.afterOrderPayCounter)
}

// OrderPayBeforeCounter returns a count of OrderServiceMock.OrderPay invocations
func (mmOrderPay *OrderServiceMock) OrderPayBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderPay.beforeOrderPayCounter)
}

// Calls returns a list of arguments used in each call to OrderServiceMock.OrderPay.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderPay *mOrderServiceMockOrderPay) Calls() []*OrderServiceMockOrderPayParams {
	mmOrderPay.mutex.RLock()

	argCopy := make([]*OrderServiceMockOrderPayParams, len(mmOrderPay.callArgs))
	copy(argCopy, mmOrderPay.callArgs)

	mmOrderPay.mutex.RUnlock()

	return argCopy
}

// MinimockOrderPayDone returns true if the count of the OrderPay invocations corresponds
// the number of defined expectations
func (m *OrderServiceMock) MinimockOrderPayDone() bool {
	if m.OrderPayMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderPayMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderPayMock.invocationsDone()
}

// MinimockOrderPayInspect logs each unmet expectation
func (m *OrderServiceMock) MinimockOrderPayInspect() {
	for _, e := range m.OrderPayMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderServiceMock.OrderPay with params: %#v", *e.params)
		}
	}

	afterOrderPayCounter := mm_atomic.LoadUint64(&m.afterOrderPayCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderPayMock.defaultExpectation != nil && afterOrderPayCounter < 1 {
		if m.OrderPayMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderServiceMock.OrderPay")
		} else {
			m.t.Errorf("Expected call to OrderServiceMock.OrderPay with params: %#v", *m.OrderPayMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderPay != nil && afterOrderPayCounter < 1 {
		m.t.Error("Expected call to OrderServiceMock.OrderPay")
	}

	if !m.OrderPayMock.invocationsDone() && afterOrderPayCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderServiceMock.OrderPay but found %d calls",
			mm_atomic.LoadUint64(&m.OrderPayMock.expectedInvocations), afterOrderPayCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockOrderCancelInspect()

			m.MinimockOrderCreateInspect()

			m.MinimockOrderInfoInspect()

			m.MinimockOrderPayInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockOrderCancelDone() &&
		m.MinimockOrderCreateDone() &&
		m.MinimockOrderInfoDone() &&
		m.MinimockOrderPayDone()
}
