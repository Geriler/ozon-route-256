// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package mock

//go:generate minimock -i route256/cart/internal/loms/client.StocksService -o loms_stocks_service_mock.go -n StocksServiceMock -p mock

import (
	"context"
	loms "route256/cart/pb/api"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StocksServiceMock implements client.StocksService
type StocksServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcStocksInfo          func(ctx context.Context, req *loms.StocksInfoRequest) (sp1 *loms.StocksInfoResponse, err error)
	inspectFuncStocksInfo   func(ctx context.Context, req *loms.StocksInfoRequest)
	afterStocksInfoCounter  uint64
	beforeStocksInfoCounter uint64
	StocksInfoMock          mStocksServiceMockStocksInfo
}

// NewStocksServiceMock returns a mock for client.StocksService
func NewStocksServiceMock(t minimock.Tester) *StocksServiceMock {
	m := &StocksServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.StocksInfoMock = mStocksServiceMockStocksInfo{mock: m}
	m.StocksInfoMock.callArgs = []*StocksServiceMockStocksInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStocksServiceMockStocksInfo struct {
	optional           bool
	mock               *StocksServiceMock
	defaultExpectation *StocksServiceMockStocksInfoExpectation
	expectations       []*StocksServiceMockStocksInfoExpectation

	callArgs []*StocksServiceMockStocksInfoParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// StocksServiceMockStocksInfoExpectation specifies expectation struct of the StocksService.StocksInfo
type StocksServiceMockStocksInfoExpectation struct {
	mock      *StocksServiceMock
	params    *StocksServiceMockStocksInfoParams
	paramPtrs *StocksServiceMockStocksInfoParamPtrs
	results   *StocksServiceMockStocksInfoResults
	Counter   uint64
}

// StocksServiceMockStocksInfoParams contains parameters of the StocksService.StocksInfo
type StocksServiceMockStocksInfoParams struct {
	ctx context.Context
	req *loms.StocksInfoRequest
}

// StocksServiceMockStocksInfoParamPtrs contains pointers to parameters of the StocksService.StocksInfo
type StocksServiceMockStocksInfoParamPtrs struct {
	ctx *context.Context
	req **loms.StocksInfoRequest
}

// StocksServiceMockStocksInfoResults contains results of the StocksService.StocksInfo
type StocksServiceMockStocksInfoResults struct {
	sp1 *loms.StocksInfoResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmStocksInfo *mStocksServiceMockStocksInfo) Optional() *mStocksServiceMockStocksInfo {
	mmStocksInfo.optional = true
	return mmStocksInfo
}

// Expect sets up expected params for StocksService.StocksInfo
func (mmStocksInfo *mStocksServiceMockStocksInfo) Expect(ctx context.Context, req *loms.StocksInfoRequest) *mStocksServiceMockStocksInfo {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("StocksServiceMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &StocksServiceMockStocksInfoExpectation{}
	}

	if mmStocksInfo.defaultExpectation.paramPtrs != nil {
		mmStocksInfo.mock.t.Fatalf("StocksServiceMock.StocksInfo mock is already set by ExpectParams functions")
	}

	mmStocksInfo.defaultExpectation.params = &StocksServiceMockStocksInfoParams{ctx, req}
	for _, e := range mmStocksInfo.expectations {
		if minimock.Equal(e.params, mmStocksInfo.defaultExpectation.params) {
			mmStocksInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStocksInfo.defaultExpectation.params)
		}
	}

	return mmStocksInfo
}

// ExpectCtxParam1 sets up expected param ctx for StocksService.StocksInfo
func (mmStocksInfo *mStocksServiceMockStocksInfo) ExpectCtxParam1(ctx context.Context) *mStocksServiceMockStocksInfo {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("StocksServiceMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &StocksServiceMockStocksInfoExpectation{}
	}

	if mmStocksInfo.defaultExpectation.params != nil {
		mmStocksInfo.mock.t.Fatalf("StocksServiceMock.StocksInfo mock is already set by Expect")
	}

	if mmStocksInfo.defaultExpectation.paramPtrs == nil {
		mmStocksInfo.defaultExpectation.paramPtrs = &StocksServiceMockStocksInfoParamPtrs{}
	}
	mmStocksInfo.defaultExpectation.paramPtrs.ctx = &ctx

	return mmStocksInfo
}

// ExpectReqParam2 sets up expected param req for StocksService.StocksInfo
func (mmStocksInfo *mStocksServiceMockStocksInfo) ExpectReqParam2(req *loms.StocksInfoRequest) *mStocksServiceMockStocksInfo {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("StocksServiceMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &StocksServiceMockStocksInfoExpectation{}
	}

	if mmStocksInfo.defaultExpectation.params != nil {
		mmStocksInfo.mock.t.Fatalf("StocksServiceMock.StocksInfo mock is already set by Expect")
	}

	if mmStocksInfo.defaultExpectation.paramPtrs == nil {
		mmStocksInfo.defaultExpectation.paramPtrs = &StocksServiceMockStocksInfoParamPtrs{}
	}
	mmStocksInfo.defaultExpectation.paramPtrs.req = &req

	return mmStocksInfo
}

// Inspect accepts an inspector function that has same arguments as the StocksService.StocksInfo
func (mmStocksInfo *mStocksServiceMockStocksInfo) Inspect(f func(ctx context.Context, req *loms.StocksInfoRequest)) *mStocksServiceMockStocksInfo {
	if mmStocksInfo.mock.inspectFuncStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("Inspect function is already set for StocksServiceMock.StocksInfo")
	}

	mmStocksInfo.mock.inspectFuncStocksInfo = f

	return mmStocksInfo
}

// Return sets up results that will be returned by StocksService.StocksInfo
func (mmStocksInfo *mStocksServiceMockStocksInfo) Return(sp1 *loms.StocksInfoResponse, err error) *StocksServiceMock {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("StocksServiceMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &StocksServiceMockStocksInfoExpectation{mock: mmStocksInfo.mock}
	}
	mmStocksInfo.defaultExpectation.results = &StocksServiceMockStocksInfoResults{sp1, err}
	return mmStocksInfo.mock
}

// Set uses given function f to mock the StocksService.StocksInfo method
func (mmStocksInfo *mStocksServiceMockStocksInfo) Set(f func(ctx context.Context, req *loms.StocksInfoRequest) (sp1 *loms.StocksInfoResponse, err error)) *StocksServiceMock {
	if mmStocksInfo.defaultExpectation != nil {
		mmStocksInfo.mock.t.Fatalf("Default expectation is already set for the StocksService.StocksInfo method")
	}

	if len(mmStocksInfo.expectations) > 0 {
		mmStocksInfo.mock.t.Fatalf("Some expectations are already set for the StocksService.StocksInfo method")
	}

	mmStocksInfo.mock.funcStocksInfo = f
	return mmStocksInfo.mock
}

// When sets expectation for the StocksService.StocksInfo which will trigger the result defined by the following
// Then helper
func (mmStocksInfo *mStocksServiceMockStocksInfo) When(ctx context.Context, req *loms.StocksInfoRequest) *StocksServiceMockStocksInfoExpectation {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("StocksServiceMock.StocksInfo mock is already set by Set")
	}

	expectation := &StocksServiceMockStocksInfoExpectation{
		mock:   mmStocksInfo.mock,
		params: &StocksServiceMockStocksInfoParams{ctx, req},
	}
	mmStocksInfo.expectations = append(mmStocksInfo.expectations, expectation)
	return expectation
}

// Then sets up StocksService.StocksInfo return parameters for the expectation previously defined by the When method
func (e *StocksServiceMockStocksInfoExpectation) Then(sp1 *loms.StocksInfoResponse, err error) *StocksServiceMock {
	e.results = &StocksServiceMockStocksInfoResults{sp1, err}
	return e.mock
}

// Times sets number of times StocksService.StocksInfo should be invoked
func (mmStocksInfo *mStocksServiceMockStocksInfo) Times(n uint64) *mStocksServiceMockStocksInfo {
	if n == 0 {
		mmStocksInfo.mock.t.Fatalf("Times of StocksServiceMock.StocksInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmStocksInfo.expectedInvocations, n)
	return mmStocksInfo
}

func (mmStocksInfo *mStocksServiceMockStocksInfo) invocationsDone() bool {
	if len(mmStocksInfo.expectations) == 0 && mmStocksInfo.defaultExpectation == nil && mmStocksInfo.mock.funcStocksInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmStocksInfo.mock.afterStocksInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmStocksInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// StocksInfo implements client.StocksService
func (mmStocksInfo *StocksServiceMock) StocksInfo(ctx context.Context, req *loms.StocksInfoRequest) (sp1 *loms.StocksInfoResponse, err error) {
	mm_atomic.AddUint64(&mmStocksInfo.beforeStocksInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmStocksInfo.afterStocksInfoCounter, 1)

	if mmStocksInfo.inspectFuncStocksInfo != nil {
		mmStocksInfo.inspectFuncStocksInfo(ctx, req)
	}

	mm_params := StocksServiceMockStocksInfoParams{ctx, req}

	// Record call args
	mmStocksInfo.StocksInfoMock.mutex.Lock()
	mmStocksInfo.StocksInfoMock.callArgs = append(mmStocksInfo.StocksInfoMock.callArgs, &mm_params)
	mmStocksInfo.StocksInfoMock.mutex.Unlock()

	for _, e := range mmStocksInfo.StocksInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmStocksInfo.StocksInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStocksInfo.StocksInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmStocksInfo.StocksInfoMock.defaultExpectation.params
		mm_want_ptrs := mmStocksInfo.StocksInfoMock.defaultExpectation.paramPtrs

		mm_got := StocksServiceMockStocksInfoParams{ctx, req}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmStocksInfo.t.Errorf("StocksServiceMock.StocksInfo got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmStocksInfo.t.Errorf("StocksServiceMock.StocksInfo got unexpected parameter req, want: %#v, got: %#v%s\n", *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStocksInfo.t.Errorf("StocksServiceMock.StocksInfo got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStocksInfo.StocksInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmStocksInfo.t.Fatal("No results are set for the StocksServiceMock.StocksInfo")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmStocksInfo.funcStocksInfo != nil {
		return mmStocksInfo.funcStocksInfo(ctx, req)
	}
	mmStocksInfo.t.Fatalf("Unexpected call to StocksServiceMock.StocksInfo. %v %v", ctx, req)
	return
}

// StocksInfoAfterCounter returns a count of finished StocksServiceMock.StocksInfo invocations
func (mmStocksInfo *StocksServiceMock) StocksInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocksInfo.afterStocksInfoCounter)
}

// StocksInfoBeforeCounter returns a count of StocksServiceMock.StocksInfo invocations
func (mmStocksInfo *StocksServiceMock) StocksInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocksInfo.beforeStocksInfoCounter)
}

// Calls returns a list of arguments used in each call to StocksServiceMock.StocksInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStocksInfo *mStocksServiceMockStocksInfo) Calls() []*StocksServiceMockStocksInfoParams {
	mmStocksInfo.mutex.RLock()

	argCopy := make([]*StocksServiceMockStocksInfoParams, len(mmStocksInfo.callArgs))
	copy(argCopy, mmStocksInfo.callArgs)

	mmStocksInfo.mutex.RUnlock()

	return argCopy
}

// MinimockStocksInfoDone returns true if the count of the StocksInfo invocations corresponds
// the number of defined expectations
func (m *StocksServiceMock) MinimockStocksInfoDone() bool {
	if m.StocksInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.StocksInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.StocksInfoMock.invocationsDone()
}

// MinimockStocksInfoInspect logs each unmet expectation
func (m *StocksServiceMock) MinimockStocksInfoInspect() {
	for _, e := range m.StocksInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StocksServiceMock.StocksInfo with params: %#v", *e.params)
		}
	}

	afterStocksInfoCounter := mm_atomic.LoadUint64(&m.afterStocksInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.StocksInfoMock.defaultExpectation != nil && afterStocksInfoCounter < 1 {
		if m.StocksInfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StocksServiceMock.StocksInfo")
		} else {
			m.t.Errorf("Expected call to StocksServiceMock.StocksInfo with params: %#v", *m.StocksInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocksInfo != nil && afterStocksInfoCounter < 1 {
		m.t.Error("Expected call to StocksServiceMock.StocksInfo")
	}

	if !m.StocksInfoMock.invocationsDone() && afterStocksInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to StocksServiceMock.StocksInfo but found %d calls",
			mm_atomic.LoadUint64(&m.StocksInfoMock.expectedInvocations), afterStocksInfoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StocksServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockStocksInfoInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StocksServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StocksServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockStocksInfoDone()
}
